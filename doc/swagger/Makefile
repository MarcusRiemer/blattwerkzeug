##################################
# Setting up JSON-Schema generation
##################################

# Path to the clients source and its project file
SRC_PATH = $(realpath ../../client/app)
SRC_PROJECT = $(realpath ../../client/tsconfig.json)

# The absolute path of the directory the schemas reside in
SCHEMA_PATH = $(realpath ../../schema/json)

include ../../schema/json/Makefile.json

# We expect the swagger codegen jar to be available in the
# home folder for now.
SWAGGER_JAR = ~/bin/swagger-codegen-cli.jar

all : html/index.html

# The schemas are copied over to the swagger directory instead
# of being linked. This makes it far easier to serve this directory
# via a webserver.
copy-schema : $(JSON_SCHEMA_FILE_NAMES)

# Copy the schema over here
%.json : $(SCHEMA_PATH)/%.json
	@cp $^ $@

# Generating the HTML documentation
html/index.html : msg-pre-html $(JSON_SCHEMA_FILE_NAMES) swagger.yaml
	java -jar $(SWAGGER_JAR) generate -i swagger.yaml -l html -o html

# Removing everything that could be generated by this Makefile.
# This does *not* touch the "original" schema files, it only
# gets rid of the copies made here.
clean : msg-pre-clean
	rm -f $(JSON_SCHEMA_FILE_NAMES)
	rm -rf html

.PHONY : all copy-schema clean

##################################
# Messaging targets
##################################
msg-pre-clean :
	-@tput setaf 2; echo "## Swagger: Cleaning"; tput sgr0

msg-pre-html :
	-@tput setaf 2; echo "## Swagger: Generating HTML"; tput sgr0
