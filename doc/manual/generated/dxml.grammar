grammar "dxml" {
  node "element" {
    terminal "<"
    prop "name" { string }
    children allowed, "attributes"  ::= attribute*
    terminal ">"
    children allowed, "elements"  ::= element* & text* & interpolate* & if*
    terminal "<ende/>"
  }
  node "attribute" {
    prop "name" { string }
    terminal "="
    terminal "\""
    children allowed, "value"  ::= text* & interpolate*
    terminal "\""
  }
  node "text" {
    prop "value" { string }
  }
  node "interpolate" {
    children allowed, "expr"  ::= expr
  }
  node "if" {
    children allowed, "condition"  ::= expr
    children allowed, "body"  ::= element* & text* & interpolate* & if*
  }
  typedef "expr" ::= exprVar | exprConst | exprBinary
  node "exprVar" {
    prop "name" { string }
  }
  node "exprConst" {
    prop "name" { string }
  }
  node "exprBinary" {
    children allowed, "lhs"  ::= expr
    children allowed, "operator"  ::= binaryOperator
    children allowed, "rhs"  ::= expr
  }
  node "binaryOperator" {
    prop "operator" { string }
  }
}
