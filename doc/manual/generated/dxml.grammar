grammar "dxml" {
  node "element" {
    prop "name" { string }
    children "attributes" ::= attribute*
    children "elements" ::= element* & text* & interpolate* & if*
  }
  node "attribute" {
    prop "name" { string }
    children "value" ::= text* & interpolate*
  }
  node "text" {
    prop "value" { string }
  }
  node "interpolate" {
    children "expr" ::= expr
  }
  node "if" {
    children "condition" ::= expr
    children "body" ::= element* & text* & interpolate* & if*
  }
  typedef "expr" ::= exprVar | exprConst | exprBinary
  node "exprVar" {
    prop "name" { string }
  }
  node "exprConst" {
    prop "name" { string }
  }
  node "exprBinary" {
    children "lhs" ::= expr
    children "operator" ::= binaryOperator
    children "rhs" ::= expr
  }
  node "binaryOperator" {
    prop "operator" { string }
  }
}
