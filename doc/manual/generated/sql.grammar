grammar "sql" {
  typedef "expression" ::= columnName | binaryExpression | constant | parameter | functionCall
  node "columnName" {
    prop "columnName" { string }
    prop "refTableName" { string }
  }
  node "constant" {
    prop "value" { string }
  }
  node "parameter" {
    prop "name" { string }
  }
  node "functionCall" {
    prop "name" { string }
    children "arguments" ::= expression*
  }
  node "starOperator" {
  }
  node "relationalOperator" {
    prop "operator" { string { enum "<" "<=" "=" ">=" ">" "LIKE" "NOT LIKE" } }
  }
  node "binaryExpression" {
    children "lhs" ::= expression
    children "operator" ::= relationalOperator
    children "rhs" ::= expression
  }
  node "select" {
    prop? "distinct" { boolean }
    children "columns" ::= expression* & starOperator?
  }
  node "delete" {
  }
  node "tableIntroduction" {
    prop "name" { string }
    prop? "alias" { string }
  }
  node "crossJoin" {
    children "table" ::= tableIntroduction
  }
  node "innerJoinOn" {
    children "table" ::= tableIntroduction
    children "on" ::= expression
  }
  node "innerJoinUsing" {
    children "table" ::= tableIntroduction
    children "using" ::= expression
  }
  typedef "join" ::= crossJoin | innerJoinUsing | innerJoinOn
  node "from" {
    children "tables" ::= tableIntroduction+
    children "joins" ::= join*
  }
  node "whereAdditional" {
    prop "operator" { string { enum "and" "or" } }
    children "expression" ::= expression
  }
  node "where" {
    children "expressions" ::= sql.expression1 sql.whereAdditional*
  }
  node "groupBy" {
    children "expressions" ::= sql.expression*
  }
  node "orderBy" {
    children "expressions" ::= sql.expression*
  }
  node "querySelect" {
    children "select" ::= select
    children "from" ::= from
    children "where" ::= where?
    children "groupBy" ::= groupBy?
    children "orderBy" ::= orderBy?
  }
  node "queryDelete" {
    children "delete" ::= delete
    children "from" ::= from
    children "where" ::= where?
  }
  typedef "query" ::= querySelect | queryDelete
}
