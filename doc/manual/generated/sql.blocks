language "Generated SQL" {
  type "sql.from" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "FROM" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "tables"
          between {
            "," {
              style {
                display: inline-block
              }
            }
          }
        }
        container {
          visual {
            iterate {
              childGroup "joins"
            }
          }
        }
      }
    }
  }
  type "sql.where" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "WHERE" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "expressions"
        }
      }
    }
  }
  type "sql.delete" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "DELETE" {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.select" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        container {
          visual {
            "SELECT" {
              style {
                display: inline-block
              }
            }
            iterate {
              childGroup "distinct"
            }
            container {
              visual {
                iterate {
                  childGroup "columns"
                }
              }
            }
          }
        }
      }
    }
  }
  type "sql.groupBy" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "GROUP BY" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "expressions"
          between {
            "," {
              style {
                display: inline-block
              }
            }
          }
        }
      }
    }
  }
  type "sql.orderBy" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "ORDER BY" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "expressions"
        }
      }
    }
  }
  type "sql.constant" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        TODO: input blocks
      }
    }
  }
  type "sql.distinct" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "DISTINCT" {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.crossJoin" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        iterate {
          childGroup "table"
        }
      }
    }
  }
  type "sql.parameter" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        ":" {
          style {
            display: inline-block
          }
        }
        TODO: input blocks
      }
    }
  }
  type "sql.sortOrder" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        iterate {
          childGroup "expression"
        }
        {{ order }} {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.columnName" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        {{ refTableName }} {
          style {
            display: inline-block
          }
        }
        "." {
          style {
            display: inline-block
          }
        }
        {{ columnName }} {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.innerJoinOn" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "INNER JOIN" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "table"
        }
        "ON" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "on"
        }
      }
    }
  }
  type "sql.parentheses" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "(" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "expression"
        }
        ")" {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.queryDelete" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        iterate {
          childGroup "delete"
        }
        iterate {
          childGroup "from"
        }
        iterate {
          childGroup "where"
        }
      }
    }
  }
  type "sql.querySelect" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        container {
          visual {
            iterate {
              childGroup "select"
            }
            iterate {
              childGroup "from"
            }
            iterate {
              childGroup "where"
            }
            iterate {
              childGroup "groupBy"
            }
            iterate {
              childGroup "orderBy"
            }
          }
        }
      }
    }
  }
  type "sql.functionCall" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        {{ name }} {
          style {
            display: inline-block
          }
        }
        "(" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "distinct"
        }
        iterate {
          childGroup "arguments"
          between {
            "," {
              style {
                display: inline-block
              }
            }
          }
        }
        ")" {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.starOperator" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "*" {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.innerJoinUsing" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        "INNER JOIN" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "table"
        }
        "USING" {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "using"
        }
      }
    }
  }
  type "sql.whereAdditional" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        {{ operator }} {
          style {
            display: inline-block
          }
        }
        iterate {
          childGroup "expression"
        }
      }
    }
  }
  type "sql.binaryExpression" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        iterate {
          childGroup "lhs"
        }
        iterate {
          childGroup "operator"
        }
        iterate {
          childGroup "rhs"
        }
      }
    }
  }
  type "sql.tableIntroduction" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        {{ name }} {
          style {
            display: inline-block
          }
        }
      }
    }
  }
  type "sql.relationalOperator" {
    block {
      breakAfter false
      dropOptions {

      }
      visual {
        TODO: error blocks
        TODO: input blocks
      }
    }
  }
  databaseSchemaSidebar
  fixedBlocksSidebar "SQL" {
    category "Ausdrücke" {
      sidebarBlock "★" {
        node "sql.starOperator"
      }
      sidebarBlock ":parameter" {
        node "sql.parameter" {
          prop "name" param
        }
      }
      sidebarBlock "Konstante" {
        node "sql.constant" {
          prop "value" wert
        }
      }
      sidebarBlock "Binärer Ausdruck" {
        node "sql.binaryExpression" {
          childGroup "lhs" {
          }
          childGroup "rhs" {
          }
          childGroup "operator" {
            node "sql.relationalOperator" {
              prop "operator" =
            }
          }
        }
      }
      sidebarBlock "Klammern" {
        node "sql.parentheses" {
          childGroup "expression" {
          }
        }
      }
    }
    category "Funktionen" {
      sidebarBlock "COUNT()" {
        node "sql.functionCall" {
          prop "name" COUNT
          childGroup "arguments" {
          }
        }
      }
      sidebarBlock "SUM()" {
        node "sql.functionCall" {
          prop "name" SUM
          childGroup "arguments" {
          }
        }
      }
      sidebarBlock "AVG()" {
        node "sql.functionCall" {
          prop "name" AVG
          childGroup "arguments" {
          }
        }
      }
      sidebarBlock "MIN()" {
        node "sql.functionCall" {
          prop "name" MIN
          childGroup "arguments" {
          }
        }
      }
      sidebarBlock "MAX()" {
        node "sql.functionCall" {
          prop "name" MAX
          childGroup "arguments" {
          }
        }
      }
      sidebarBlock "GROUP_CONCAT()" {
        node "sql.functionCall" {
          prop "name" GROUP_CONCAT
          childGroup "arguments" {
          }
        }
      }
    }
    category "Komponenten" {
      sidebarBlock "SELECT" {
        node "sql.querySelect" {
          childGroup "from" {
            node "sql.from"
          }
          childGroup "where" {
          }
          childGroup "select" {
            node "sql.select"
          }
          childGroup "groupBy" {
          }
        }
      }
      sidebarBlock "... DISTINCT" {
        node "sql.distinct"
      }
      sidebarBlock "FROM" {
        node "sql.from" {
          childGroup "tables" {
          }
        }
      }
      sidebarBlock "JOIN" {
        node "sql.crossJoin" {
          childGroup "table" {
          }
        }
      }
      sidebarBlock "INNER JOIN USING" {
        node "sql.innerJoinUsing" {
          childGroup "table" {
          }
          childGroup "using" {
          }
        }
      }
      sidebarBlock "INNER JOIN ON" {
        node "sql.innerJoinOn" {
          childGroup "on" {
            node "sql.binaryExpression" {
              childGroup "lhs" {
              }
              childGroup "rhs" {
              }
              childGroup "operator" {
                node "sql.relationalOperator" {
                  prop "operator" =
                }
              }
            }
          }
          childGroup "table" {
          }
        }
      }
      sidebarBlock "WHERE" {
        node "sql.where" {
          childGroup "expressions" {
          }
        }
      }
      sidebarBlock "... AND" {
        node "sql.whereAdditional" {
          prop "operator" AND
          childGroup "expression" {
          }
        }
      }
      sidebarBlock "... OR" {
        node "sql.whereAdditional" {
          prop "operator" OR
          childGroup "expression" {
          }
        }
      }
      sidebarBlock "GROUP BY" {
        node "sql.groupBy" {
          childGroup "expressions" {
          }
        }
      }
      sidebarBlock "ORDER BY" {
        node "sql.orderBy" {
          childGroup "expressions" {
          }
        }
      }
      sidebarBlock "<expr> ASC" {
        node "sql.sortOrder" {
          prop "order" ASC
          childGroup "expression" {
          }
        }
      }
      sidebarBlock "<expr> DESC" {
        node "sql.sortOrder" {
          prop "order" DESC
          childGroup "expression" {
          }
        }
      }
    }
  }
}
