
@thesis{riemer2016,
  location = {{Wedel}},
  title = {{{BlattWerkzeug}} - {{Eine}} Datenzentrierte {{Entwicklungsumgebung}} Für Den {{Schulunterricht}}},
  url = {http://files.blattwerkzeug.de/theses/marcus-riemer-thesis-blattwerkzeug.pdf},
  institution = {{Fachhohschule Wedel}},
  type = {Master-Thesis},
  urldate = {2018-09-23},
  date = {2016-10-31},
  author = {Riemer, Markus}
}

@book{wagenknecht2009,
  location = {{Wiesbaden}},
  title = {Formale {{Sprachen}}, Abstrakte {{Automaten}} Und {{Compiler}}: {{Lehr}}- Und {{Arbeitsbuch}} Für {{Grundstudium}} Und {{Fortbildung}}},
  edition = {1},
  isbn = {978-3-8348-0624-6},
  shorttitle = {Formale {{Sprachen}}, Abstrakte {{Automaten}} Und {{Compiler}}},
  abstract = {Die Autoren widmen sich einer Thematik, die sehr oft in Werken über theoretische Informatik mitbehandelt wird, z.B. bei B. Hollas (ID 29/07). Ein Buch mit ähnlichem Titel ist J. Hopcroft (letzte besprochene Auflage ID 47/00), das allerdings auch die hier nicht behandelten Themen Berechenbarkeit und Komplexitätstheorie beinhaltet. Die Autoren stützen ihre Ausführungen auf die von ihnen entwickelte, frei verfügbare Lern- und Arbeitsumgebung AtoCC. Angesprochen werden Studierende an Fachhochschulen und Berufsakademien; aber auch Schülerinnen und Schüler in Informatik-Leistungskursen der Sekundarstufe II können mit dem Buch gut arbeiten. Bei diesen Lesern werden "nur" Schulkenntnisse in Mathematik vorausgesetzt. Die Ausführungen des Buches stützen sich auf ein großes Fallbeispiel, das immer weiter ausgebaut wird, die Erstellung eines Compilers für eine Sprache mit grafischen Effekten. So liegt der Schwerpunkt bei der automatisierten Compilergenerierung. Gut berücksichtigt werden aber die Struktur von Programmen, reguläre Sprachen, Kellerautomaten und kontextfreie Sprachen. Viele praxisnahe Übungen. (3 S)},
  pagetotal = {xi+243},
  series = {Studium},
  publisher = {{Vieweg   Teubner}},
  date = {2009},
  author = {Wagenknecht, Christian and Hielscher, Michael}
}

@book{reichert2004,
  location = {{Berlin [u.a.]}},
  title = {Programmieren Mit {{Kara}}: Ein Spielerischer {{Zugang}} Zur {{Informatik}}},
  isbn = {978-3-540-40362-3},
  shorttitle = {Programmieren Mit {{Kara}}},
  abstract = {Der Autor J. Nievergelt hat vor etwa 15 Jahren eine immer noch gut einsetzbare Einführung in "Datenstrukturen und Algorithmen" geschrieben (BA 8/87), die sich auch für den Informatikunterricht in der Sekundarstufe II eignet. Das vorliegende Buch steht in der Tradition dieses früheren Werkes. Die Autoren gehen davon aus, dass Computer heute unseren Alltag prägen und deshalb die Grundlagen der Informations- und Kommunikationstechnologien, mit anderen Worten ein fundiertes Verständnis für die Funktionsweise von Computern und Softwaresystemen zur Allgemeinbildung gehört. Gestützt auf den programmierbaren Marienkäfer Kara (einem als endlichen Automaten implementierten Roboter) führen sie in spielerischer Weise in grundlegende Algorithmen der Informatik ein. Aber auch komplexere Themen wie z.B. die Koordination nebenläufiger Prozesse oder die Modellierung zweidimensionaler Turingmaschinen werden ausführlich berücksichtigt. Mit oft verblüffenden Beispielen wird die Bedeutung dieser Konzepte im Alltag demonstriert. Die},
  pagetotal = {x+130},
  series = {Springer-{{Lehrbuch}}},
  publisher = {{Springer}},
  date = {2004},
  author = {Reichert, Raimond and Nievergelt, Jürg and Hartmann, Werner}
}

@book{pattis1981,
  location = {{New York [u.a.]}},
  title = {Karel the Robot: A Gentle Introduction to the Art of Programming},
  isbn = {978-0-471-08928-5},
  shorttitle = {Karel the Robot},
  pagetotal = {xiv+106},
  publisher = {{Wiley}},
  date = {1981},
  author = {Pattis, Richard E.}
}

@book{papert1980,
  location = {{Brighton}},
  title = {Mindstorms: Children, Computers, and Powerful Ideas},
  isbn = {978-0-85527-163-3},
  shorttitle = {Mindstorms},
  pagetotal = {viii+230},
  number = {14},
  series = {Harvester Studies in Cognitive Science},
  publisher = {{Harvester Press}},
  date = {1980},
  author = {Papert, Seymour}
}

@article{brusilovsky1997,
  langid = {english},
  title = {Mini-Languages: A Way to Learn Programming Principles},
  volume = {2},
  issn = {1573-7608},
  url = {https://doi.org/10.1023/A:1018636507883},
  doi = {10.1023/A:1018636507883},
  shorttitle = {Mini-Languages},
  abstract = {Mini-languages are a visually intuitive, simple and powerful way to introduce students to programming. They are a good foundation for general computer science instruction, provide insight into programming for the general population, and teach algorithmic thinking. The goal of the paper is to provide an extensive review of the mini-language approach to teaching programming. For different audiences and in different countries, the authors have extensive experience in design and application of mini-languages. We outline the problems that motivate the application of this approach, present a brief history, review several existing mini-languages, and provide discussion of lessons learned. In particular, we discuss how to choose a mini-language for a particular group of students and list some requirements for a successful application of a mini- language. We conclude with a discussion of possible future directions of the mini-language approach development},
  number = {1},
  journaltitle = {Education and Information Technologies},
  shortjournal = {Education and Information Technologies},
  urldate = {2018-11-28},
  date = {1997-03-01},
  pages = {65-83},
  author = {Brusilovsky, Peter and Calabrese, Eduardo and Hvorecky, Jozef and Kouchnirenko, Anatoly and Miller, Philip}
}

@online{yaroslavski2014,
  langid = {english},
  title = {Lightbot},
  url = {http://lightbot.com/Lightbot_HowDoesLightbotTeachProgramming.pdf},
  urldate = {2018-11-30},
  date = {2014-03-07},
  author = {Yaroslavski, Danny}
}

@online{kara2017,
  langid = {german},
  title = {SwissEduc - Informatik - Kara: Lernumgebungen rund ums Programmieren},
  url = {https://www.swisseduc.ch/informatik/karatojava/index.html},
  urldate = {2018-12-01},
  date = {2017-06-19}
}

@inproceedings{malone1981,
  location = {{New York, NY, USA}},
  title = {What {{Makes Computer Games Fun}}?},
  isbn = {978-0-89791-064-4},
  url = {http://doi.acm.org/10.1145/800276.810990},
  doi = {10.1145/800276.810990},
  shorttitle = {What {{Makes Computer Games Fun}}?},
  abstract = {One can't deny the effectiveness of video arcade games in reachipg users! Just loop at the number of quarters pushed into the slots, the time spent by people of widely differing abilities, and the number of repeat encounters with the systems. At least part of the success is due to the ease of getting started (the first play of the game gets one comfortable with the procedures), the high degree of visualization of controls and results, and the responsiveness overall. Other factors will be taken up by the panelists.Review of the home computer market shows what can be accomplished by an easy-to-use accounting aid through advertising store demonstrations, and word of mouth. Visicalc has sold over a million dollars! Attendees will have an opportunity to try some of these impressive applications before and after the session.},
  booktitle = {Proceedings of the {{Joint Conference}} on {{Easier}} and {{More Productive Use}} of {{Computer Systems}}. ({{Part}} - {{II}}): {{Human Interface}} and the {{User Interface}} - {{Volume}} 1981},
  series = {{{CHI}} '81},
  publisher = {{ACM}},
  urldate = {2018-12-11},
  date = {1981},
  pages = {143--},
  author = {Malone, Thomas}
}

@book{prensky2007,
  langid = {english},
  location = {{St. Paul, Minn}},
  title = {Digital Game-Based Learning: New Roles for Trainers and Teachers ; How to Combine Computer Games and Learning ; Real-Life Case Studies from Organizations Utilizing Game-Based Techniques},
  edition = {Paragon House ed},
  isbn = {978-1-55778-863-4},
  shorttitle = {Digital Game-Based Learning},
  pagetotal = {442},
  publisher = {{Paragon House}},
  date = {2007},
  author = {Prensky, Marc},
  note = {OCLC: 836298397}
}

@online{angular-canvas,
  langid = {english},
  title = {{{SVG}} and {{Canvas Graphics}} in {{Angular}} 2},
  url = {https://teropa.info/blog/2016/12/12/graphics-in-angular-2.html},
  abstract = {Tero Parviainen},
  urldate = {2018-12-13}
}

@online{angular-animations,
  title = {Angular - {{Introduction}} to {{Angular}} Animations},
  url = {https://angular.io/guide/animations},
  urldate = {2019-01-15}
}

@online{mdn-function,
  langid = {german},
  title = {Function},
  url = {https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function},
  abstract = {Der Function Konstruktor erstellt ein neues Funktion Objekt. Das direkte Aufrufen kann Funktionen dynamisch erstellen, hat aber Sicherheits- und Performanceprobleme genau wie der Einsatz von eval. Im Gegensatz zu eval ermöglicht der Function-Konstruktor die Ausführung von Code im globalen Gültigkeitsbereich, was zu besseren Programmiergewohnheiten führt und eine effizientere Code-Minimierung ermöglicht.},
  journaltitle = {MDN-Web-Dokumentation},
  urldate = {2019-01-16}
}

@online{mdn-async-function,
  langid = {german},
  title = {async function},
  url = {https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/async_function},
  abstract = {Die async function Deklaration leitet eine asynchrone Funktion ein, die ein AsyncFunction Objekt ergibt.},
  journaltitle = {MDN-Web-Dokumentation},
  urldate = {2019-01-19}
}

@online{mdn-async-constructor,
  langid = {german},
  title = {AsyncFunction},
  url = {https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction},
  abstract = {Der~AsyncFunction Konstruktor erstellt ein neues~AsyncFunction Objekt. In JavaScript ist jede asynchrone Funktion ein AsyncFunction Objekt.},
  journaltitle = {MDN-Web-Dokumentation},
  urldate = {2019-01-19}
}


