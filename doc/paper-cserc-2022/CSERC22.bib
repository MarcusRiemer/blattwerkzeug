
@misc{alrubaye_comparison_2019,
  title = {Comparison of Block-Based and Hybrid-Based Environments in Transferring Programming Skills to Text-Based Environments},
  author = {Alrubaye, Hussein and Ludi, Stephanie and Mkaouer, Mohamed Wiem},
  year = {2019},
  month = nov,
  number = {arXiv:1906.03060},
  eprint = {1906.03060},
  eprinttype = {arxiv},
  primaryclass = {cs},
  institution = {{arXiv}},
  doi = {10.48550/arXiv.1906.03060},
  abstract = {Teachers face several challenges when presenting the fundamental concepts of programming in the classroom. Several tools are introduced to give a visual dimension to support the learning process. These tools rely on code blocks, easily manipulated in a plug and play fashion, to build a program. These block-based tools intend to familiarize students with programming logic, before diving into text-based programming languages such as Java, Python, etc. However; when transitioning from block-based to text-based programming, students often encounter a gap in their learning. The student may not be able to apply block-based foundations in a text-based environment. To bridge the gap between both environments, we developed a hybrid-based learning approach. We found that on average a hybrid-based approach increases the students understanding of programming foundations, memorization, and ease of transition by more than 30\% when compared to a block-based to text-based learning approach. Finally, we provide the community with an open source, hybrid-based learning tool that can be used by students when learning programming concepts or for future studies.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computers and Society},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/NSG8I2JH/Alrubaye et al. - 2019 - Comparison of block-based and hybrid-based environ.pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/6UW9X46D/1906.html}
}

@inproceedings{braune_learning_2020,
  title = {Learning to Program: The Gap between School World and Everyday World},
  shorttitle = {Learning to Program},
  booktitle = {Proceedings of the 15th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Braune, Gert and M{\"u}hling, Andreas},
  year = {2020},
  month = oct,
  series = {{{WiPSCE}} '20},
  pages = {1--9},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3421590.3421597},
  abstract = {We present the results of a qualitative study on students' perceptions of programming environments. Interviews were coded using Grounded Theory over the course of their first lessons on programming. All students used one of four typical programming environments for introductory lessons in K12 (Scratch, RubyKara, mBlock, and Robot Karol) and had no prior programming experience. Our results indicate that students perceive these environments as having only a specific, educational purpose. To them, this indicates that the capabilities of the tools are also restricted. Also, they hold the conception of "real programming" that is in some way distinct from their lessons on programming. We present the category system that results from our analysis and discuss both the findings using the sociological theory of lifeworld and implications for teaching programming.},
  isbn = {978-1-4503-8759-0},
  keywords = {grounded theory,learner conceptions,perception of computing,phenomena},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/M66WAB26/Braune and Mühling - 2020 - Learning to program the gap between school world .pdf}
}

@inproceedings{fraser_ten_2015,
  title = {Ten Things We've Learned from {{Blockly}}},
  booktitle = {2015 {{IEEE Blocks}} and {{Beyond Workshop}} ({{Blocks}} and {{Beyond}})},
  author = {Fraser, Neil},
  year = {2015},
  month = oct,
  pages = {49--50},
  publisher = {{IEEE}},
  address = {{Atlanta, GA, USA}},
  doi = {10.1109/BLOCKS.2015.7369000},
  abstract = {Over the last four years the Blockly team has learned many lessons which are applicable to block-based programming in general. The following are a collection of ten mistakes we have made, or mistakes commonly made by others. Each issue is presented as noncontroversial folk knowledge without supporting data.},
  isbn = {978-1-4673-8367-7},
  langid = {english},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/DVSXF6WI/Fraser - 2015 - Ten things we've learned from Blockly.pdf}
}

@inproceedings{hartmann_kara_2001,
  title = {Kara, Finite State Machines, and the Case for Programming as Part of General Education},
  booktitle = {Proceedings {{IEEE Symposia}} on {{Human-Centric Computing Languages}} and {{Environments}} ({{Cat}}. {{No}}.{{01TH8587}})},
  author = {Hartmann, W. and Nievergelt, J. and Reichert, R.},
  year = {2001},
  month = sep,
  pages = {135--141},
  doi = {10.1109/HCC.2001.995251},
  abstract = {As a major evolutionary step in computer technology, users have come to rely on ready-made application software, rather than writing their own programs. If computer users no longer program, does it follow that the art of programming should only be taught to computing professionals? We argue the case for programming as a component of general education - not because of any direct utilitarian benefit, but in order to gain a personal experience as to what it means, and what it takes, to specify processes that evolve over time. An analogy to mathematics education shows that schools teach the concept of "proof", although in daily life people use mathematical formulas without knowledge of their proof. Programming practiced as an educational exercise, free from utilitarian constraints, is best learned in a toy environment, designed to illustrate selected concepts in the simplest possible setting. As an example, we present the programming system Kara based on the concept of finite state machines.},
  keywords = {Application software,Art,Automata,Computer science education,Educational institutions,Educational programs,Mathematics,Programming profession,Utility programs,Writing},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/ZZD8K7XV/Hartmann et al. - 2001 - Kara, finite state machines, and the case for prog.pdf}
}

@inproceedings{kolling_frame-based_2015,
  title = {Frame-{{Based Editing}}: {{Easing}} the {{Transition}} from {{Blocks}} to {{Text-Based Programming}}},
  shorttitle = {Frame-{{Based Editing}}},
  booktitle = {Proceedings of the {{Workshop}} in {{Primary}} and {{Secondary Computing Education}}},
  author = {K{\"o}lling, Michael and Brown, Neil C. C. and Altadmri, Amjad},
  year = {2015},
  month = nov,
  series = {{{WiPSCE}} '15},
  pages = {29--38},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2818314.2818331},
  abstract = {Block-based programming systems, such as Scratch or Alice, are the most popular environments for introducing young children to programming. However, mastery of text-based programming continues to be the educational goal for students who continue to program into their teenage years and beyond. Transitioning across the significant gap between the two editing styles presents a difficult challenge in school-level teaching of programming. We propose a new style of program manipulation to bridge the gap: frame-based editing. Frame-based editing has the resistance to errors and approachability of block-based programming while retaining the flexibility and more conventional programming semantics of text-based programming languages. In this paper, we analyse the issues involved in the transition from blocks to text and argue that they can be overcome by using frame-based editing as an intermediate step. A design and implementation of a frame-based editor is provided.},
  isbn = {978-1-4503-3753-3},
  keywords = {Editing,Frame-based editing,Novice programming},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/PFUNSVZP/Kölling et al. - 2015 - Frame-Based Editing Easing the Transition from Bl.pdf}
}

@phdthesis{popp_konzeption_2019,
  type = {{Bachelor}},
  title = {{Konzeption und Implementierung einer visuellen Lernumgebung zur spielerischen Einf\"uhrung in die Programmierung}},
  author = {Popp, Sebastian},
  year = {2019},
  month = feb,
  address = {{Wedel}},
  langid = {german},
  school = {Fachhochschule Wedel},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/VIB3FXLV/Popp - Konzeption und Implementierung einer visuellen Ler.pdf}
}

@incollection{wadler_prettier_printer,
  title = {A Prettier Printer},
  booktitle = {The {{Fun}} of {{Programming}}},
  author = {Wadler, Philip},
  editor = {Gibbons, Jeremy and {de Moor}, Oege},
  year = {2003},
  pages = {223--243},
  publisher = {{Macmillan Education UK}},
  address = {{London}},
  doi = {10.1007/978-1-349-91518-7_11},
  isbn = {978-1-349-91518-7},
  langid = {english},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/Y6Y57D8V/Wadler - 2003 - A prettier printer.pdf}
}


