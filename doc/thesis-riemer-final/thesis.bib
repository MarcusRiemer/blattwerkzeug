
@book{aho_compilers_2007-1,
  title = {Compilers: Principles, Techniques, \& Tools},
  shorttitle = {Compilers},
  editor = {Aho, Alfred V. and Lam, Monica S. and Sethi, Ravi and Ullman, Jeffrey D.},
  year = {2007},
  edition = {2. ed., Pearson internat. ed},
  publisher = {{Pearson, Addison Wesley}},
  address = {{Boston}},
  isbn = {978-0-321-48681-3 978-0-321-49169-5},
  language = {en},
  annotation = {OCLC: 266438845}
}

@book{aho_compilers_2007-2,
  title = {Compilers: Principles, Techniques, \& Tools},
  shorttitle = {Compilers},
  editor = {Aho, Alfred V. and Aho, Alfred V.},
  year = {2007},
  edition = {2nd ed},
  publisher = {{Pearson/Addison Wesley}},
  address = {{Boston}},
  isbn = {978-0-321-48681-3},
  language = {en},
  lccn = {QA76.76.C65 A37 2007},
  keywords = {Compilers (Computer programs)},
  annotation = {OCLC: ocm70775643},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/SB45SZP2/Aho and Aho - 2007 - Compilers principles, techniques, & tools.pdf}
}

@phdthesis{albalawi_controlled_2013,
  title = {{{CONTROLLED ENVIRONMENT TO RUN UNTRUSTED APPLICATIONS}}},
  author = {Albalawi, Tahani F.},
  year = {2013},
  language = {en},
  school = {Kent State University},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/8BIA74PE/Albalawi - 2013 - CONTROLLED ENVIRONMENT TO RUN UNTRUSTED APPLICATIO.pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/YZEVP2IU/10.html}
}

@book{brady_type-driven_2017,
  title = {Type-Driven Development with {{Idris}}},
  author = {Brady, Edwin},
  year = {2017},
  publisher = {{Manning Publications Co}},
  address = {{Shelter Island, NY}},
  isbn = {978-1-61729-302-3},
  lccn = {QA76.62 .B73 2017},
  keywords = {Functional programming (Computer science),Idris (Computer program language)},
  annotation = {OCLC: ocn950958936}
}

@inproceedings{braune_learning_2020,
  title = {Learning to Program: The Gap between School World and Everyday World},
  shorttitle = {Learning to Program},
  booktitle = {Proceedings of the 15th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Braune, Gert and M{\"u}hling, Andreas},
  year = {2020},
  month = oct,
  series = {{{WiPSCE}} '20},
  pages = {1--9},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3421590.3421597},
  abstract = {We present the results of a qualitative study on students' perceptions of programming environments. Interviews were coded using Grounded Theory over the course of their first lessons on programming. All students used one of four typical programming environments for introductory lessons in K12 (Scratch, RubyKara, mBlock, and Robot Karol) and had no prior programming experience. Our results indicate that students perceive these environments as having only a specific, educational purpose. To them, this indicates that the capabilities of the tools are also restricted. Also, they hold the conception of "real programming" that is in some way distinct from their lessons on programming. We present the category system that results from our analysis and discuss both the findings using the sociological theory of lifeworld and implications for teaching programming.},
  isbn = {978-1-4503-8759-0},
  keywords = {grounded theory,learner conceptions,perception of computing,phenomena},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/M66WAB26/Braune and Mühling - 2020 - Learning to program the gap between school world .pdf}
}

@article{brusilovsky_mini-languages_1997,
  title = {Mini-Languages: A Way to Learn Programming Principles},
  shorttitle = {Mini-Languages},
  author = {Brusilovsky, Peter and Calabrese, Eduardo and Hvorecky, Jozef and Kouchnirenko, Anatoly and Miller, Philip},
  year = {1997},
  month = mar,
  journal = {Education and Information Technologies},
  volume = {2},
  number = {1},
  pages = {65--83},
  issn = {1573-7608},
  doi = {10.1023/A:1018636507883},
  abstract = {Mini-languages are a visually intuitive, simple and powerful way to introduce students to programming. They are a good foundation for general computer science instruction, provide insight into programming for the general population, and teach algorithmic thinking. The goal of the paper is to provide an extensive review of the mini-language approach to teaching programming. For different audiences and in different countries, the authors have extensive experience in design and application of mini-languages. We outline the problems that motivate the application of this approach, present a brief history, review several existing mini-languages, and provide discussion of lessons learned. In particular, we discuss how to choose a mini-language for a particular group of students and list some requirements for a successful application of a mini- language. We conclude with a discussion of possible future directions of the mini-language approach development},
  language = {en},
  keywords = {highereducation,informatics,languages,logo,programming,secondaryeducation}
}

@article{chen_evaluating_2021,
  title = {Evaluating {{Large Language Models Trained}} on {{Code}}},
  author = {Chen, Mark and Tworek, Jerry and Jun, Heewoo and Yuan, Qiming and Pinto, Henrique Ponde de Oliveira and Kaplan, Jared and Edwards, Harri and Burda, Yuri and Joseph, Nicholas and Brockman, Greg and Ray, Alex and Puri, Raul and Krueger, Gretchen and Petrov, Michael and Khlaaf, Heidy and Sastry, Girish and Mishkin, Pamela and Chan, Brooke and Gray, Scott and Ryder, Nick and Pavlov, Mikhail and Power, Alethea and Kaiser, Lukasz and Bavarian, Mohammad and Winter, Clemens and Tillet, Philippe and Such, Felipe Petroski and Cummings, Dave and Plappert, Matthias and Chantzis, Fotios and Barnes, Elizabeth and {Herbert-Voss}, Ariel and Guss, William Hebgen and Nichol, Alex and Paino, Alex and Tezak, Nikolas and Tang, Jie and Babuschkin, Igor and Balaji, Suchir and Jain, Shantanu and Saunders, William and Hesse, Christopher and Carr, Andrew N. and Leike, Jan and Achiam, Josh and Misra, Vedant and Morikawa, Evan and Radford, Alec and Knight, Matthew and Brundage, Miles and Murati, Mira and Mayer, Katie and Welinder, Peter and McGrew, Bob and Amodei, Dario and McCandlish, Sam and Sutskever, Ilya and Zaremba, Wojciech},
  year = {2021},
  month = jul,
  journal = {arXiv:2107.03374 [cs]},
  eprint = {2107.03374},
  eprinttype = {arxiv},
  primaryclass = {cs},
  abstract = {We introduce Codex, a GPT language model fine-tuned on publicly available code from GitHub, and study its Python code-writing capabilities. A distinct production version of Codex powers GitHub Copilot. On HumanEval, a new evaluation set we release to measure functional correctness for synthesizing programs from docstrings, our model solves 28.8\% of the problems, while GPT-3 solves 0\% and GPT-J solves 11.4\%. Furthermore, we find that repeated sampling from the model is a surprisingly effective strategy for producing working solutions to difficult prompts. Using this method, we solve 70.2\% of our problems with 100 samples per problem. Careful investigation of our model reveals its limitations, including difficulty with docstrings describing long chains of operations and with binding operations to variables. Finally, we discuss the potential broader impacts of deploying powerful code generation technologies, covering safety, security, and economics.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Machine Learning},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/UAH3UK4M/Chen et al. - 2021 - Evaluating Large Language Models Trained on Code.pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/G2HUXR79/2107.html}
}

@misc{clark_relax_2001,
  title = {{{RELAX NG Specification}}},
  author = {Clark, James and Murata, Makoto},
  year = {2001},
  abstract = {This is the definitive specification of RELAX NG, a simple schema language for XML, based on [RELAX] and [TREX]. A RELAX NG schema specifies a pattern for the structure and content of an XML document. A RELAX NG schema is itself an XML document.},
  howpublished = {http://www.relaxng.org/spec-20011203.html},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/GH42J67Q/spec-20011203.html}
}

@book{dragon_book,
  title = {Compilers: Principles, Techniques, \& Tools},
  shorttitle = {Compilers},
  editor = {Aho, Alfred V. and Lam, Monica S. and Sethi, Ravi and Ullman, Jeffrey D.},
  year = {2007},
  edition = {2. ed., Pearson internat. ed},
  publisher = {{Pearson, Addison Wesley}},
  address = {{Boston}},
  isbn = {978-0-321-49169-5},
  language = {eng},
  annotation = {OCLC: 266438845},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/ATHI5XFT/Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman-Compilers - Principles, Techniques, and Tools-Pearson_Addison Wesley (2006).pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/E79WHD54/Aho et al. - 2007 - Compilers principles, techniques, & tools.pdf}
}

@misc{effective-colour-part-2,
  title = {Effective {{Use}} of {{Color}} and {{Graphics}} in {{Applications}} for {{Children}}, {{Part II}}: {{Kids}} 7 to 14 {{Years}} of {{Age}}},
  author = {{Naranjo-Bock}, Catalina},
  year = {2011},
  month = dec,
  journal = {UX matters}
}

@article{efftinge_oaw_2006,
  title = {{{oAW xText}}: {{A}} Framework for Textual {{DSLs}}},
  author = {Efftinge, Sven and V{\"o}lter, Markus},
  year = {2006},
  month = sep,
  journal = {Workshop on Modeling Symposium at EclipseCon},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/Q4FFLJCF/Efftinge and Völter - oAW xText A framework for textual DSLs.pdf}
}

@misc{efftinge_xtext,
  title = {{{oAW xText}}: {{A}} Framework for Textual {{DSLs}}},
  author = {Efftinge, Sven and V{\"o}lter, Markus},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/NEPY2XK7/Efftinge and Völter - oAW xText A framework for textual DSLs.pdf}
}

@inproceedings{fraser_ten_2015,
  title = {Ten Things We've Learned from {{Blockly}}},
  booktitle = {2015 {{IEEE Blocks}} and {{Beyond Workshop}} ({{Blocks}} and {{Beyond}})},
  author = {Fraser, Neil},
  year = {2015},
  month = oct,
  pages = {49--50},
  publisher = {{IEEE}},
  address = {{Atlanta, GA, USA}},
  doi = {10.1109/BLOCKS.2015.7369000},
  abstract = {Over the last four years the Blockly team has learned many lessons which are applicable to block-based programming in general. The following are a collection of ten mistakes we have made, or mistakes commonly made by others. Each issue is presented as noncontroversial folk knowledge without supporting data.},
  isbn = {978-1-4673-8367-7},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/DVSXF6WI/Fraser - 2015 - Ten things we've learned from Blockly.pdf}
}

@inproceedings{gissurarson_suggesting_2018,
  title = {Suggesting Valid Hole Fits for Typed-Holes (Experience Report)},
  booktitle = {Proceedings of the 11th {{ACM SIGPLAN International Symposium}} on {{Haskell}}  - {{Haskell}} 2018},
  author = {Gissurarson, Matth{\'i}as P{\'a}ll},
  year = {2018},
  pages = {179--185},
  publisher = {{ACM Press}},
  address = {{St. Louis, MO, USA}},
  doi = {10.1145/3242744.3242760},
  abstract = {Type systems allow programmers to communicate a partial specification of their program to the compiler using types, which can then be used to check that the implementation matches the specification. But can the types be used to aid programmers during development? In this experience report I describe the design and implementation of my lightweight and practical extension to the typed-holes of GHC that improves user experience by adding a list of valid hole fits and refinement hole fits to the error message of typed-holes. By leveraging the type checker, these fits are selected from identifiers in scope such that if the hole is substituted with a valid hole fit, the resulting expression is guaranteed to type check.},
  isbn = {978-1-4503-5835-4},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/ZJH7TRED/Gissurarson - 2018 - Suggesting valid hole fits for typed-holes (experi.pdf}
}

@article{gissurarson_suggesting_2018,
  title = {Suggesting {{Valid Hole Fits}} for {{Typed}}-{{Holes}} in {{Haskell}}},
  author = {Gissurarson, Matth{\'i}as P{\'a}ll},
  year = {2018},
  abstract = {Most programs are developed from some sort of specification, and type systems allow programmers to communicate part of this specification to the compiler via the types. The types can then be used to verify that the implementation matches this partial specification. But can the types be used to aid programmers during development, beyond verification? In this thesis I present a lightweight and practical extension to the typed-holes of GHC that improves user experience and facilitates a style of programming called ``Type-Driven Development''.},
  language = {eng},
  annotation = {Accepted: 2019-07-03T14:54:56Z},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/MH63ZMSR/Gissurarson - 2018 - Suggesting Valid Hole Fits for Typed-Holes in Hask.pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/6MWDUVJU/256110.html}
}

@book{grimm_informatik_2015,
  title = {{Informatik 2}},
  shorttitle = {{Informatik. 2, [Sch\"ulerband]}},
  author = {Grimm, Robert and Scholle, Oliver},
  editor = {Kempe, Thomas and L{\"o}hr, Annika},
  year = {2015},
  series = {{Sch\"oningh-Schulbuch}},
  edition = {Druck A, 1},
  publisher = {{Sch\"oningh}},
  address = {{Paderborn}},
  isbn = {978-3-14-037127-8},
  language = {ger},
  keywords = {Schulbuch},
  annotation = {OCLC: 942763242}
}

@book{grimm_informatik_2015,
  title = {{Informatik 2}},
  shorttitle = {{Informatik. 2, [Sch\"ulerband]}},
  author = {Grimm, Robert and Scholle, Oliver},
  editor = {Kempe, Thomas and L{\"o}hr, Annika},
  year = {2015},
  series = {{Sch\"oningh-Schulbuch}},
  edition = {Druck A, 1},
  publisher = {{Sch\"oningh}},
  address = {{Paderborn}},
  isbn = {978-3-14-037127-8},
  language = {ger},
  keywords = {Schulbuch},
  annotation = {OCLC: 942763242}
}

@misc{gunnerson-minus-100,
  title = {Minus 100 Points},
  author = {Gunnerson, Eric},
  year = {2004},
  month = jan,
  journal = {Sign in     Eric Gunnerson's Compendium}
}

@inproceedings{henley_inquisitive_2021,
  title = {An {{Inquisitive Code Editor}} for {{Addressing Novice Programmers}}' {{Misconceptions}} of {{Program Behavior}}},
  booktitle = {2021 {{IEEE}}/{{ACM}} 43rd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE}}-{{SEET}})},
  author = {Henley, Austin Z. and Ball, Julian and Klein, Benjamin and Rutter, Aiden and Lee, Dylan},
  year = {2021},
  month = may,
  pages = {165--170},
  publisher = {{IEEE}},
  address = {{Madrid, Spain}},
  doi = {10.1109/ICSE-SEET52601.2021.00026},
  abstract = {Novice programmers face numerous barriers while attempting to learn how to code that may deter them from pursuing a computer science degree or career in software development. In this work, we propose a tool concept to address the particularly challenging barrier of novice programmers holding misconceptions about how their code behaves. Specifically, the concept involves an inquisitive code editor that: (1) identifies misconceptions by periodically prompting the novice programmer with questions about their program's behavior, (2) corrects the misconceptions by generating explanations based on the program's actual behavior, and (3) prevents further misconceptions by inserting test code and utilizing other educational resources. We have implemented portions of the concept as plugins for the Atom code editor and conducted informal surveys with students and instructors. Next steps include deploying the tool prototype to students enrolled in introductory programming courses.},
  isbn = {978-1-66540-138-8},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/35L6ES2V/Henley et al. - 2021 - An Inquisitive Code Editor for Addressing Novice P.pdf}
}

@inproceedings{henley_toward_2017,
  title = {Toward {{Principles}} for the {{Design}} of {{Navigation Affordances}} in {{Code Editors}}: {{An Empirical Investigation}}},
  shorttitle = {Toward {{Principles}} for the {{Design}} of {{Navigation Affordances}} in {{Code Editors}}},
  booktitle = {Proceedings of the 2017 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Henley, Austin Z. and Fleming, Scott D. and Luong, Maria V.},
  year = {2017},
  month = may,
  pages = {5690--5702},
  publisher = {{ACM}},
  address = {{Denver Colorado USA}},
  doi = {10.1145/3025453.3025645},
  abstract = {Design principles are a key tool for creators of interactive systems; however, a cohesive set of principles has yet to emerge for the design of code editors. In this paper, we conducted a between-subjects empirical study comparing the navigation behaviors of 32 professional LabVIEW programmers using two different code-editor interfaces: the ubiquitous tabbed editor and the experimental Patchworks editor. Our analysis focused on how the programmers arranged and navigated among open information patches (i.e., code modules and program output). Key findings of our study included that Patchworks users made significantly fewer click actions per navigation, juxtaposed patches side by side significantly more, and exhibited significantly fewer navigation mistakes than tabbed-editor users. Based on these findings and more, we propose five general principles for the design of effective navigation affordances in code editors.},
  isbn = {978-1-4503-4655-9},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/VJKEWECT/Henley et al. - 2017 - Toward Principles for the Design of Navigation Aff.pdf}
}

@book{hopcroft_formal_languages,
  title = {{Einf\"uhrung in die Automatentheorie, formale Sprachen und Komplexit\"atstheorie}},
  author = {Hopcroft, John E. and Motwani, Rajeev and Ullman, Jeffrey D. and Hopcroft, John E.},
  year = {20},
  series = {{Pearson Studium Theoretische Informatik}},
  edition = {[Nachdr..] 2., \"uberarb. Aufl},
  publisher = {{Pearson Studium}},
  address = {{M\"unchen}},
  isbn = {978-3-8273-7020-4},
  language = {ger},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/SYAGWT3K/Hopcroft et al. - Einführung in die Automatentheorie, formale Sprach.pdf}
}

@book{hubwieser_inf_2,
  title = {{Tabellenkalkulationssysteme, Datenbanken}},
  editor = {Hubwieser, Peter and Spohrer, Mattias},
  year = {2011},
  series = {{Informatik}},
  edition = {1. Aufl., 5. Dr},
  number = {Lehrwerk f\"ur Gymnasien ; 2, [Sch\"ulerbd,]},
  publisher = {{Klett}},
  address = {{Stuttgart}},
  isbn = {978-3-12-731668-1},
  language = {ger},
  keywords = {Gymnasium,Informatik,Schulbuch},
  annotation = {OCLC: 934924890}
}

@book{hubwieser_inf_2,
  title = {{Tabellenkalkulationssysteme, Datenbanken}},
  editor = {Hubwieser, Peter and Spohrer, Mattias},
  year = {2011},
  series = {{Informatik}},
  edition = {1. Aufl., 5. Dr},
  number = {Lehrwerk f\"ur Gymnasien ; 2, [Sch\"ulerbd,]},
  publisher = {{Klett}},
  address = {{Stuttgart}},
  isbn = {978-3-12-731668-1},
  language = {ger},
  keywords = {Gymnasium,Informatik,Schulbuch},
  annotation = {OCLC: 934924890}
}

@misc{jones_haskell_2014,
  type = {Wiki},
  title = {Haskell {{Typed}} Holes},
  author = {Jones, Simon Peyton and Leather, Sean and Alkemade, Thijs},
  year = {2014},
  journal = {Glasgow Haskell Compiler},
  howpublished = {https://wiki.haskell.org/index.php?title=GHC/Typed\_holes\&oldid=58717},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/6P7W49FT/index.html}
}

@book{klaeren_macht_2007,
  title = {{Die Macht der Abstraktion: Einf\"uhrung in die Programmierung}},
  shorttitle = {{Die Macht der Abstraktion}},
  author = {Klaeren, Herbert and Sperber, Michael},
  year = {2007},
  series = {{Leitf\"aden der Informatik}},
  edition = {1. Aufl},
  publisher = {{Teubner}},
  address = {{Wiesbaden}},
  isbn = {978-3-8351-0155-5},
  language = {ger},
  annotation = {OCLC: 180067150},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/VHDMUKJW/Klaeren and Sperber - 2007 - Die Macht der Abstraktion Einführung in die Progr.pdf}
}

@article{knuth_backus_1964,
  title = {Backus Normal Form vs. {{Backus Naur}} Form},
  author = {Knuth, Donald E.},
  year = {1964},
  month = dec,
  journal = {Communications of the ACM},
  volume = {7},
  number = {12},
  pages = {735--736},
  issn = {0001-0782},
  doi = {10.1145/355588.365140}
}

@incollection{knuth_genesis_1990,
  title = {The Genesis of Attribute Grammars},
  booktitle = {Attribute {{Grammars}} and Their {{Applications}}},
  author = {Knuth, Donald E.},
  editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegm{\"u}ller, G. and Stoer, J. and Wirth, N. and Deransart, P. and Jourdan, M.},
  year = {1990},
  volume = {461},
  pages = {1--12},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-53101-7_1},
  isbn = {978-3-540-53101-2 978-3-540-46666-6},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/YKTANUUL/Knuth - 1990 - The genesis of attribute grammars.pdf}
}

@article{knuth_semantics_1968,
  title = {Semantics of Context-Free Languages},
  author = {Knuth, Donald E.},
  year = {1968},
  month = jun,
  journal = {Mathematical systems theory},
  volume = {2},
  number = {2},
  pages = {127--145},
  issn = {1433-0490},
  doi = {10.1007/BF01692511},
  abstract = {``Meaning'' may be assigned to a string in a context-free language by defining ``attributes'' of the symbols in a derivation tree for that string. The attributes can be defined by functions associated with each production in the grammar. This paper examines the implications of this process when some of the attributes are ``synthesized'', i.e., defined solely in terms of attributes of thedescendants of the corresponding nonterminal symbol, while other attributes are ``inherited'', i.e., defined in terms of attributes of theancestors of the nonterminal symbol. An algorithm is given which detects when such semantic rules could possibly lead to circular definition of some attributes. An example is given of a simple programming language defined with both inherited and synthesized attributes, and the method of definition is compared to other techniques for formal specification of semantics which have appeared in the literature.},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/79ZEMDN4/Knuth - 1968 - Semantics of context-free languages.pdf}
}

@misc{lehrplan-inf-sek-1,
  title = {Lehrplan F\"ur {{Angewandte Informatik}} in Der {{Sekundarstufe I}}},
  year = {2010},
  publisher = {{Land Schleswig-Holstein}}
}

@misc{lehrplan-inf-sek-2,
  title = {Lehrplan F\"ur {{Angewandte Informatik}} in Der {{Sekundarstufe II}}},
  year = {2002},
  publisher = {{Land Schleswig-Holstein}}
}

@misc{liquid-introduction,
  title = {Introduction},
  journal = {Liquid Documentation}
}

@misc{liquid-introduction,
  title = {Introduction \textendash{} {{Liquid Templating Engine}}},
  howpublished = {https://shopify.github.io/liquid/basics/introduction/}
}

@book{macht-der-abstraktion,
  title = {Die {{Macht}} Der {{Abstraktion}}: {{Einf\"uhrung}} in Die {{Programmierung}}},
  author = {Klaeren, Herbert and Sperber, Micheal},
  year = {2007},
  publisher = {{Vieweg+Teubner Verlag}},
  isbn = {3-8351-0155-2}
}

@inproceedings{malone_what_1981,
  title = {What Makes Computer Games Fun? (Abstract Only)},
  shorttitle = {What Makes Computer Games Fun?},
  booktitle = {Proceedings of the Joint Conference on {{Easier}} and More Productive Use of Computer Systems. ({{Part}} - {{II}}) {{Human}} Interface and the User Interface -},
  author = {Malone, Thomas},
  year = {1981},
  volume = {1981},
  pages = {143},
  publisher = {{ACM Press}},
  address = {{Ann Arbor, MI}},
  doi = {10.1145/800276.810990},
  isbn = {978-0-89791-064-4},
  language = {en}
}

@inproceedings{maloney_scratch_2004,
  title = {Scratch: A Sneak Preview},
  shorttitle = {Scratch},
  booktitle = {Proceedings. {{Second International Conference}} on {{Creating}}, {{Connecting}} and {{Collaborating}} through {{Computing}}, 2004.},
  author = {Maloney, J. and Burd, L. and Kafai, Y. and Rusk, N. and Silverman, B. and Resnick, M.},
  year = {2004},
  pages = {104--109},
  publisher = {{IEEE}},
  address = {{Kyoto, Japan}},
  doi = {10.1109/C5.2004.1314376},
  abstract = {Scratch is a networked, media-rich programming environment designed to enhance the development of technological fluency at after-school centers in economically-disadvantaged communities. Just as the LEGO MindStorms robotics kit added programmability to an activity deeply rooted in youth culture (building with LEGO bricks), Scratch adds programmability to the media-rich and network-based activities that are most popular among youth at afterschool computer centers. Taking advantage of the extraordinary processing power of current computers, Scratch supports new programming paradigms and activities that were previously infeasible, making it better positioned to succeed than previous attempts to introduce programming to youth.},
  isbn = {978-0-7695-2166-4},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/HL7BVRTU/Maloney et al. - 2004 - Scratch a sneak preview.pdf}
}

@inproceedings{maloney_scratch_2004-1,
  title = {Scratch: A Sneak Preview [Education]},
  shorttitle = {Scratch},
  booktitle = {Proceedings. {{Second International Conference}} on {{Creating}}, {{Connecting}} and {{Collaborating}} through {{Computing}}, 2004.},
  author = {Maloney, J. and Burd, L. and Kafai, Y. and Rusk, N. and Silverman, B. and Resnick, M.},
  year = {2004},
  month = jan,
  pages = {104--109},
  doi = {10.1109/C5.2004.1314376},
  abstract = {Scratch is a networked, media-rich programming environment designed to enhance the development of technological fluency at after-school centers in economically-disadvantaged communities. Just as the LEGO MindStorms robotics kit added programmability to an activity deeply rooted in youth culture (building with LEGO bricks), Scratch adds programmability to the media-rich and network-based activities that are most popular among youth at after-school computer centers. Taking advantage of the extraordinary processing power of current computers, Scratch supports programming paradigms and activities that were previously infeasible, making it better positioned to succeed than previous attempts to introduce programming to youth. Our working hypothesis is that, as kids work on personally meaningful Scratch projects such as animated stories, games, and interactive art, they develop technological fluency, mathematical and problem solving skills, and a justifiable self-confidence that serves them well in the wider spheres of their lives.},
  keywords = {after-school centers,Animation,Art,Buildings,computer graphics,Computer networks,distributed programming,educational computing,Educational programs,Environmental economics,media-rich programming environment,networked programming environment,object-oriented programming,Power generation economics,programming environments,Programming environments,Programming profession,Robot programming,Scratch,technological fluency,visual programming},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/LA3PUC3D/1314376.html}
}

@article{mernik_dsl_2005,
  title = {When and How to Develop Domain-Specific Languages},
  author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony M.},
  year = {2005},
  month = dec,
  journal = {ACM Computing Surveys},
  volume = {37},
  number = {4},
  pages = {316--344},
  issn = {0360-0300},
  doi = {10.1145/1118890.1118892},
  abstract = {Domain-specific languages (DSLs) are languages tailored to a specific application domain. They offer substantial gains in expressiveness and ease of use compared with general-purpose programming languages in their domain of application. DSL development is hard, requiring both domain knowledge and language development expertise. Few people have both. Not surprisingly, the decision to develop a DSL is often postponed indefinitely, if considered at all, and most DSLs never get beyond the application library stage.Although many articles have been written on the development of particular DSLs, there is very limited literature on DSL development methodologies and many questions remain regarding when and how to develop a DSL. To aid the DSL developer, we identify patterns in the decision, analysis, design, and implementation phases of DSL development. Our patterns improve and extend earlier work on DSL design patterns. We also discuss domain analysis tools and language development systems that may help to speed up DSL development. Finally, we present a number of open problems.},
  keywords = {application language,domain analysis,Domain-specific language,language development system},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/LQSIMQ7D/Mernik et al. - 2005 - When and how to develop domain-specific languages.pdf}
}

@book{naranjo-bock_effective_2011,
  title = {Effective {{Use}} of {{Color}} and {{Graphics}} in {{Applications}} for {{Children}}, {{Part II}}: {{Kids}} 7 to 14 {{Years}} of {{Age}}},
  author = {{Naranjo-Bock}, Catalina},
  year = {2011},
  month = dec
}

@article{noauthor_designierte_2018,
  title = {Designierte {{Staatsministerin}} F\"ur {{Digitales}}: {{Programmieren}} Ist Laut {{B\"ar}} 'so Wichtig Wie {{Lesen}} Und {{Schreiben}}'},
  shorttitle = {Designierte {{Staatsministerin}} F\"ur {{Digitales}}},
  year = {2018},
  month = mar,
  journal = {Spiegel Online},
  abstract = {Dorothee B\"ar soll sich als Staatsministerin um die Digitalisierung im Land k\"ummern. In Interviews kritisiert sie nun einen "Datenschutz wie im 18. Jahrhundert" und fordert Programmierunterricht f\"ur Grundsch\"uler.},
  chapter = {Politik},
  keywords = {CSU,Digitale Zukunft,Dorothee Bär,Zukunft gestalten},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/T9P22VRA/dorothee-baer-programmieren-ist-so-wichtig-wie-lesen-und-schreiben-a-1196619.html}
}

@article{noauthor_howdoeslightbotteachprogramming_nodate,
  title = {{{HowDoesLightbotTeachProgramming}}},
  pages = {5},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/D3DD82PE/HowDoesLightbotTeachProgramming.pdf}
}

@inproceedings{noauthor_notitle_nodate,
  type = {Inproceedings}
}

@misc{noauthor_notitle_nodate-1,
  type = {Misc}
}

@misc{noauthor_running_nodate,
  title = {Running {{Python}} in the {{Web Browser}}},
  journal = {Anvil},
  abstract = {There are many ways to run Python in the browser. At PyCon UK 2019, Shaun talked about six different approaches, showed how to use them, and compared their designs and tradeoffs.},
  howpublished = {https://anvil.works/blog/python-in-the-browser-talk},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/SDDQ5BJ9/python-in-the-browser-talk.html}
}

@book{noauthor_sql_nodate,
  title = {{{SQL As Understood By SQLite}}}
}

@misc{noauthor_whatsapp_nodate,
  title = {{{WhatsApp Web}}},
  abstract = {Quickly send and receive WhatsApp messages right from your computer.},
  howpublished = {https://web.whatsapp.com/},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/HZIS75JB/web.whatsapp.com.html}
}

@misc{open-api,
  title = {Open {{API Initiative}}},
  howpublished = {https://openapis.org/}
}

@book{papert_mindstorms_1982,
  title = {Mindstorms: Children, Computers, and Powerful Ideas},
  shorttitle = {Mindstorms},
  author = {Papert, Seymour},
  year = {1982},
  series = {Harvester Studies in Cognitive Science},
  edition = {Reprint},
  number = {14},
  publisher = {{Harvester Press}},
  address = {{Brighton}},
  isbn = {978-0-85527-163-3 978-0-7108-0472-3},
  language = {eng}
}

@book{perice_types_2002,
  title = {Types and {{Programming Languages}}},
  author = {Perice, Benjamin},
  year = {2002},
  publisher = {{The MIT Press}},
  isbn = {978-0-262-16209-8},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/Q6Z4RTAB/Perice - 2002 - Types and Programming Languages.pdf}
}

@book{prensky_digital_2007,
  title = {Digital Game-Based Learning: New Roles for Trainers and Teachers ; How to Combine Computer Games and Learning ; Real-Life Case Studies from Organizations Utilizing Game-Based Techniques},
  shorttitle = {Digital Game-Based Learning},
  author = {Prensky, Marc and Thiagarajan, Sivasailam},
  year = {2007},
  edition = {Paragon House ed},
  publisher = {{Paragon House}},
  address = {{St. Paul, Minn}},
  isbn = {978-1-55778-863-4},
  language = {eng},
  annotation = {OCLC: 836298397},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/SMZZDBFI/Prensky and Thiagarajan - 2007 - Digital game-based learning new roles for trainer.pdf}
}

@book{prensky_digital_2007-1,
  title = {Digital Game-Based Learning: New Roles for Trainers and Teachers ; How to Combine Computer Games and Learning ; Real-Life Case Studies from Organizations Utilizing Game-Based Techniques},
  shorttitle = {Digital Game-Based Learning},
  author = {Prensky, Marc and Thiagarajan, Sivasailam},
  year = {2007},
  edition = {Paragon House ed},
  publisher = {{Paragon House}},
  address = {{St. Paul, Minn}},
  isbn = {978-1-55778-863-4},
  language = {eng},
  annotation = {OCLC: 836298397},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/H7TT92U3/Prensky and Thiagarajan - 2007 - Digital game-based learning new roles for trainer.pdf}
}

@article{resnick_scratch_2009,
  title = {Scratch: Programming for All},
  shorttitle = {Scratch},
  author = {Resnick, Mitchel and Silverman, Brian and Kafai, Yasmin and Maloney, John and {Monroy-Hern{\'a}ndez}, Andr{\'e}s and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay},
  year = {2009},
  month = nov,
  journal = {Communications of the ACM},
  volume = {52},
  number = {11},
  pages = {60},
  issn = {00010782},
  doi = {10.1145/1592761.1592779},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/JWAXU6TY/Resnick et al. - 2009 - Scratch programming for all.pdf}
}

@misc{riemer_blattwerkzeug_2016,
  title = {{BlattWerkzeug - Eine datenzentrierte Entwicklungsumgebung f\"ur den Schulunterricht}},
  shorttitle = {{BlattWerkzeug}},
  author = {Riemer, Marcus},
  year = {2016},
  language = {German},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/S3L3YR69/marcus-riemer-thesis-blattwerkzeug.pdf}
}

@book{schiffer_visuelle_2001,
  title = {Visuelle {{Programmierung}}. {{Grundlagen}} Und {{Einsatzm\"oglichkeiten}}},
  author = {Schiffer, Stefan},
  year = {2001},
  month = jan,
  publisher = {{Addison Wesley Verlag}},
  address = {{Bonn}},
  isbn = {978-3-8273-1271-6},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/J7JFXAJL/Schiffer - 2001 - Visuelle Programmierung. Grundlagen und Einsatzmög.pdf;/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/QRISPX6M/19881a6fd9c9dff1e69201eccd679f09d27f.pdf}
}

@misc{spolsky_law_2002,
  title = {The {{Law}} of {{Leaky Abstractions}}},
  author = {Spolsky, Joel},
  year = {2002},
  month = nov,
  journal = {Joel on Software},
  abstract = {There's a key piece of magic in the engineering of the Internet which you rely on every single day. It happens in the TCP protocol, one of the fundamental building blocks of the Internet. TCP\ldots},
  howpublished = {https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/},
  language = {en-US},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/XID4VCG3/the-law-of-leaky-abstractions.html}
}

@misc{spolsky_law_abstractions,
  title = {The {{Law}} of {{Leaky Abstractions}}},
  author = {Spolsky, Joel},
  year = {2002},
  month = nov,
  journal = {Joel on Software},
  howpublished = {http://www.joelonsoftware.com/articles/LeakyAbstractions.html}
}

@misc{sqlite-grammar,
  title = {{{SQL As Understood By SQLite}}},
  journal = {SQL As Understood By SQLite},
  howpublished = {https://www.sqlite.org/lang.html}
}

@misc{statista-os-verbreitung,
  title = {Marktanteile Der F\"uhrenden {{Betriebssystemversionen}} in {{Deutschland}} von {{Januar}} 2009 Bis {{M\"arz}} 2016},
  journal = {Statista},
  howpublished = {http://de.statista.com/statistik/daten/studie/158102/}
}

@misc{statista-os-verbreitung,
  title = {Betriebssysteme - {{Marktanteile}} Weltweit Bis {{Juli}} 2016},
  howpublished = {http://de.statista.com/statistik/daten/studie/157902/}
}

@inproceedings{trivedi_system_2019,
  title = {System {{Model}} for {{Syntax Free Coding}}},
  booktitle = {2019 {{Global Conference}} for {{Advancement}} in {{Technology}} ({{GCAT}})},
  author = {Trivedi, Pratul and Kajgaonkar, Pranav and Kulkarni, Abhishek and Kolte, Nikhil and Kanawade, Bhavana},
  year = {2019},
  month = oct,
  pages = {1--5},
  doi = {10.1109/GCAT47503.2019.8978461},
  abstract = {Every programming language has its own attributes, advantages and its own syntax. The logical reasoning applied by the programmer also requires awareness of the syntax specific to that language. Writing correct code depends heavily on syntax proficiency. Perhaps this can be asserted as an impediment of general programming languages. The new learners of a particular programming language find it difficult to cope up with the syntax requirement of that particular language. This not only increases the time required to learn a language but also shifts the focus of the user from logical reasoning. In order to shun the tedious approach of learning the syntax of a language, the approach of converting the user's logic drafted in natural language directly into the appropriate programming syntax can be used. This approach will not only grant the user the ability to use natural language but will eliminate the syntax dependency as well. Since logic construction for a solution to a problem is constrained by the syntax of a programming language, we propose a system that allows the user to provide a simple English statement as input to the system, which will then be translated into syntactically correct code.We show that the system works efficiently with more than 80\% accuracy. With each iteration, the dataset gets trained and updated, further increasing the precision and recall of the system. We also convey that, with the help of this system the syntax dependency can be eliminated, thereby increasing the user's efficiency.},
  keywords = {artificial intelligence,ma- chine learning,natural language processing},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/7RENADLF/8978461.html}
}

@book{ts-compiler-class-order-bug,
  title = {{{TypeError}}: B Is Undefined in \_\_extends}
}

@misc{ts-compiler-class-order-bug,
  title = {{{TypeError}}: B Is Undefined in \_\_extends},
  journal = {Github},
  howpublished = {https://github.com/Microsoft/TypeScript/issues/4341}
}

@incollection{wadler_prettier_printer,
  title = {A Prettier Printer},
  booktitle = {The {{Fun}} of {{Programming}}},
  author = {Wadler, Philip},
  editor = {Gibbons, Jeremy and {de Moor}, Oege},
  year = {2003},
  pages = {223--243},
  publisher = {{Macmillan Education UK}},
  address = {{London}},
  doi = {10.1007/978-1-349-91518-7_11},
  isbn = {978-0-333-99285-2 978-1-349-91518-7},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/Y6Y57D8V/Wadler - 2003 - A prettier printer.pdf}
}

@misc{xml_schema,
  type = {{{W3C Standard}}},
  title = {{{XML Schema Definition Language}} ({{XSD}})},
  howpublished = {https://www.w3.org/TR/xmlschema/},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/4F3FCD7A/xmlschema.html}
}

@misc{xml_spec,
  title = {Extensible {{Markup Language}} ({{XML}}) 1.0 ({{Fifth Edition}})},
  howpublished = {https://www.w3.org/TR/xml/},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/K3GLIEWU/xml.html}
}

@misc{yaroslavski_lightbot,
  title = {How Does {{Lightbot}} Teach Programming?},
  author = {Yaroslavski, Danny},
  year = {2014},
  month = jul,
  howpublished = {https://lightbot.com/hoclearn.html},
  language = {en},
  file = {/home/marcus/.zotero/zotero/oczy2fmr.default/zotero/storage/HGTS9GTL/HowDoesLightbotTeachProgramming.pdf}
}


