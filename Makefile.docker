# Bundling all operations related to docker in a single file

default:
	@echo no default target

# Starts the dev environment which continously watches the server and client folder
# and rebuilds them on changes.. It may be shut down using ^C in the shell that started
# this target or via the `stop-dev` target from another shell.
run-dev:
	docker-compose -f docker-compose.development.yml up

# Starts the test environment to run all tests exactly once.
run-test:
	docker-compose -f docker-compose.test.yml up --force-recreate --abort-on-container-exit
	docker-compose -f docker-compose.test.yml down

# Interactively opens a shell on the dev server container. This is useful to run
# maintenance tasks with `rails (located at `server/bin/rails`).
shell-server-dev:
	docker-compose -f docker-compose.development.yml exec --user user server /bin/bash

# Interactively opens a shell on the dev client container. This is useful to run
# maintenance tasks with `ng` (located at `client/node_modules/.bin/ng`)
shell-client-dev:
	docker-compose -f docker-compose.development.yml exec --user user client /bin/bash

# Stops a running developent environment.
stop-dev:
	docker-compose -f docker-compose.development.yml down

# Pulls the latest images from the docker hub. If you want to run this project as
# quick as possible this is the way to go.
pull-all: pull-base pull-server-dev pull-client-dev pull-test

# Pulls the base image
pull-base:
	docker pull marcusriemer/sqlino:base

# Pulls all development images
pull-dev: pull-client-dev pull-server-dev

# Pulls the development image for the client
pull-client-dev: pull-base
	docker pull marcusriemer/sqlino:client-dev

# Pulls the development image for the server
pull-server-dev: pull-base
	docker pull marcusriemer/sqlino:server-dev

# Pulls the image that can run all tests
pull-test: pull-base
	docker pull marcusriemer/sqlino:test

# Locally builds all images that are required for development. You probably want to
# simply pull them.
build-dev: build-server-dev build-client-dev
	@echo built development images

# Builds the base image
build-base:
	docker pull archimg/base-devel
	docker-compose -f docker-compose.base.yml build base

# Builds the server image that runs Rails
build-server-dev: build-base
	docker-compose -f docker-compose.development.yml build server

# Builds the client image that compiles Angular
build-client-dev: build-base
	docker-compose -f docker-compose.development.yml build client

# Builds an image that can run all testcases
build-test: build-base
	docker-compose -f docker-compose.test.yml build

# Builds all images
build-all: build-base build-server-dev build-client-dev build-test

# Pushes locally built base image back to the docker hub, requires privileges
push-base:
	docker push marcusriemer/sqlino:base

# Pushes locally built dev images back to the docker hub, requires privileges
push-dev: push-server-dev push-client-dev

# Pushes locally built server dev image back to the docker hub, requires privileges
push-server-dev: push-base
	docker push marcusriemer/sqlino:server-dev

# Pushes locally built client dev image back to the docker hub, requires privileges
push-client-dev: push-base
	docker push marcusriemer/sqlino:client-dev

# Pushes locally built test image back to the docker hub, requires privileges
push-test : push-base
	docker push marcusriemer/sqlino:test

# Pushes all local images to the docker hub, requires privileges
push-all: push-base push-server-dev push-client-dev push-test


