class ProjectQueriesController < ApplicationController
  include ProjectsHelper

  # Allows the execution of arbitrary SQL, which might be a little
  # dangerous ;) 
  def run_arbitrary   
    # TODO: Validate
    # request_data = @@validator.ensure_request("ArbitraryQueryRequestDescription", request.body.read)
    request_data = JSON.parse request.body.read

    # TODO: Remove this ugly hack to limit the maximum number of rows
    sql_query = "#{request_data['sql']}\nLIMIT 100"
    
    result = self.current_project.execute_sql(sql_query, request_data['params'])
    render json: result['rows']
  end

  # Running a query that has already been stored on the server
  def run_stored    
    # TODO: Validate
    # query_params = @@validator.ensure_request("QueryParamsDescription", request.body.read)
    query_params = JSON.parse request.body.read
    
    result = current_query.execute(query_params)
    render json: result['rows']
  end

  # Creating a new query
  def create
    @current_query = Query.new current_project, nil
    self.edit
  end

  # Storing a query
  def edit
    ensure_write_access do  
      # TODO: Validate
      # new_query = @@validator.ensure_request("QueryUpdateRequestDescription", request.body.read)
      new_query = JSON.parse request.body.read

      # Update whatever representation is currently loaded. If this is a new query
      # the ID has been autogenerated, otherwise this ist the "old" id which we dont touch.
      current_query.model = new_query['model']
      current_query.sql = new_query['sql']

      current_query.save!

      render json: current_query.id
    end
  end

  # Deleting a query
  def destroy
    ensure_write_access do  
      current_query.delete!
      render status: 200
    end
  end

end
