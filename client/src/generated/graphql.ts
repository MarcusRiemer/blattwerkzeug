import gql from "graphql-tag";
import { Injectable } from "@angular/core";
import * as Apollo from "apollo-angular";
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  NodeDescription: any;
  Datetime: any;
  /** Represents untyped JSON */
  JSON: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type BlockLanguage = {
  __typename?: "BlockLanguage";
  codeResources?: Maybe<Array<CodeResource>>;
  createdAt?: Maybe<Scalars["Datetime"]>;
  defaultProgrammingLanguage: ProgrammingLanguage;
  grammar?: Maybe<Grammar>;
  id: Scalars["ID"];
  model: Scalars["JSON"];
  name: Scalars["String"];
  slug?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["Datetime"]>;
};

/** The connection type for BlockLanguage. */
export type BlockLanguageConnection = {
  __typename?: "BlockLanguageConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BlockLanguageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<BlockLanguage>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type BlockLanguageEdge = {
  __typename?: "BlockLanguageEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<BlockLanguage>;
};

export type CodeResource = {
  __typename?: "CodeResource";
  ast?: Maybe<Scalars["NodeDescription"]>;
  blockLanguage: BlockLanguage;
  compiled?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["Datetime"]>;
  grammars?: Maybe<Grammar>;
  id: Scalars["ID"];
  name: Scalars["String"];
  programmingLanguage: ProgrammingLanguage;
  project: Project;
  updatedAt?: Maybe<Scalars["Datetime"]>;
};

/** The connection type for CodeResource. */
export type CodeResourceConnection = {
  __typename?: "CodeResourceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CodeResourceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<CodeResource>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type CodeResourceEdge = {
  __typename?: "CodeResourceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<CodeResource>;
};

/** Autogenerated input type of CreateGrammarMutation */
export type CreateGrammarMutationInput = {
  name: Scalars["String"];
  slug?: Maybe<Scalars["String"]>;
  model: Scalars["JSON"];
  programmingLanguageId: Scalars["ID"];
  generatedFromId?: Maybe<Scalars["ID"]>;
  blockLanguageIds?: Maybe<Array<Scalars["ID"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateGrammarMutation */
export type CreateGrammarMutationPayload = {
  __typename?: "CreateGrammarMutationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors: Array<Scalars["String"]>;
  grammar?: Maybe<Grammar>;
  id: Scalars["ID"];
};

/** Autogenerated input type of CreateNewsMutation */
export type CreateNewsMutationInput = {
  title: Scalars["JSON"];
  text: Scalars["JSON"];
  publishedFrom?: Maybe<Scalars["Datetime"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateNewsMutation */
export type CreateNewsMutationPayload = {
  __typename?: "CreateNewsMutationPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors: Array<Scalars["String"]>;
  id: Scalars["ID"];
  news?: Maybe<News>;
};

export type Grammar = {
  __typename?: "Grammar";
  blockLanguages?: Maybe<BlockLanguageConnection>;
  codeResources?: Maybe<CodeResourceConnection>;
  createdAt: Scalars["Datetime"];
  generatedFrom?: Maybe<CodeResource>;
  id: Scalars["ID"];
  model: Scalars["JSON"];
  name: Scalars["String"];
  programmingLanguage?: Maybe<ProgrammingLanguage>;
  programmingLanguageId?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["Datetime"];
};

export type GrammarBlockLanguagesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type GrammarCodeResourcesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

/** The connection type for Grammar. */
export type GrammarConnection = {
  __typename?: "GrammarConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GrammarEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Grammar>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type GrammarEdge = {
  __typename?: "GrammarEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Grammar>;
};

export type GrammarOrder = {
  orderField?: Maybe<GrammarOrderFieldEnum>;
  orderDirection?: Maybe<OrderDirectionEnum>;
};

export enum GrammarOrderFieldEnum {
  Name = "name",
  Slug = "slug",
}

export type Identity = {
  __typename?: "Identity";
  createdAt?: Maybe<Scalars["Datetime"]>;
  id: Scalars["ID"];
  ownData?: Maybe<Scalars["JSON"]>;
  provider: Scalars["String"];
  providerData?: Maybe<Scalars["JSON"]>;
  type: Scalars["String"];
  updatedAt?: Maybe<Scalars["Datetime"]>;
  user: User;
};

export type LanguageString = {
  __typename?: "LanguageString";
  de?: Maybe<Scalars["String"]>;
  en?: Maybe<Scalars["String"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  createGrammar?: Maybe<CreateGrammarMutationPayload>;
  createNews?: Maybe<CreateNewsMutationPayload>;
  id: Scalars["ID"];
};

export type MutationCreateGrammarArgs = {
  input: CreateGrammarMutationInput;
};

export type MutationCreateNewsArgs = {
  input: CreateNewsMutationInput;
};

export type News = {
  __typename?: "News";
  createdAt: Scalars["ISO8601DateTime"];
  id: Scalars["ID"];
  publishedFrom?: Maybe<Scalars["ISO8601DateTime"]>;
  text: LanguageString;
  title: LanguageString;
  updatedAt: Scalars["ISO8601DateTime"];
  user?: Maybe<User>;
};

/** The connection type for News. */
export type NewsConnection = {
  __typename?: "NewsConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NewsEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<News>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type NewsEdge = {
  __typename?: "NewsEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<News>;
};

export enum OrderDirectionEnum {
  Asc = "ASC",
  Desc = "DESC",
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: "PageInfo";
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars["String"]>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars["Boolean"];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars["Boolean"];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars["String"]>;
};

export type ProgrammingLanguage = {
  __typename?: "ProgrammingLanguage";
  id: Scalars["ID"];
  name: Scalars["String"];
};

/** The connection type for ProgrammingLanguage. */
export type ProgrammingLanguageConnection = {
  __typename?: "ProgrammingLanguageConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProgrammingLanguageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProgrammingLanguage>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProgrammingLanguageEdge = {
  __typename?: "ProgrammingLanguageEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProgrammingLanguage>;
};

export type Project = {
  __typename?: "Project";
  blockLanguages?: Maybe<BlockLanguageConnection>;
  codeResources?: Maybe<CodeResourceConnection>;
  createdAt?: Maybe<Scalars["Datetime"]>;
  defaultDatabase?: Maybe<ProjectDatabaseConnection>;
  description: Scalars["String"];
  grammars?: Maybe<GrammarConnection>;
  id: Scalars["ID"];
  indexPageId?: Maybe<Scalars["String"]>;
  name: LanguageString;
  preview?: Maybe<Scalars["String"]>;
  projectSources?: Maybe<ProjectSourceConnection>;
  public?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["Datetime"]>;
  user?: Maybe<User>;
};

export type ProjectBlockLanguagesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type ProjectCodeResourcesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type ProjectDefaultDatabaseArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type ProjectGrammarsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type ProjectProjectSourcesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename?: "ProjectConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

export type ProjectDatabase = {
  __typename?: "ProjectDatabase";
  createdAt: Scalars["Datetime"];
  id: Scalars["ID"];
  name?: Maybe<Scalars["String"]>;
  project?: Maybe<Project>;
  schema?: Maybe<Scalars["JSON"]>;
  updatedAt: Scalars["Datetime"];
};

/** The connection type for ProjectDatabase. */
export type ProjectDatabaseConnection = {
  __typename?: "ProjectDatabaseConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectDatabaseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectDatabase>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectDatabaseEdge = {
  __typename?: "ProjectDatabaseEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectDatabase>;
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: "ProjectEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Project>;
};

export type ProjectOrder = {
  orderField?: Maybe<ProjectOrderFieldEnum>;
  orderDirection?: Maybe<OrderDirectionEnum>;
};

export enum ProjectOrderFieldEnum {
  Name = "name",
  Slug = "slug",
}

export type ProjectSource = {
  __typename?: "ProjectSource";
  createdAt?: Maybe<Scalars["Datetime"]>;
  display: Scalars["String"];
  id: Scalars["ID"];
  project: Project;
  readOnly: Scalars["Boolean"];
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["Datetime"]>;
  url: Scalars["String"];
};

/** The connection type for ProjectSource. */
export type ProjectSourceConnection = {
  __typename?: "ProjectSourceConnection";
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectSourceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<ProjectSource>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars["Int"];
};

/** An edge in a connection. */
export type ProjectSourceEdge = {
  __typename?: "ProjectSourceEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectSource>;
};

export type Query = {
  __typename?: "Query";
  blockLanguages: BlockLanguageConnection;
  codeResources: CodeResourceConnection;
  /** Lists Grammars */
  grammars?: Maybe<GrammarConnection>;
  news: NewsConnection;
  programmingLanguages: ProgrammingLanguageConnection;
  projectDatabases: ProjectDatabaseConnection;
  projectSources: ProjectSourceConnection;
  /** Lists projects */
  projects?: Maybe<ProjectConnection>;
};

export type QueryBlockLanguagesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryCodeResourcesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryGrammarsArgs = {
  id?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  order?: Maybe<GrammarOrder>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryNewsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryProgrammingLanguagesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryProjectDatabasesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryProjectSourcesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type QueryProjectsArgs = {
  id?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  public?: Maybe<Scalars["Boolean"]>;
  order?: Maybe<ProjectOrder>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
};

export type Role = {
  __typename?: "Role";
  createdAt: Scalars["Datetime"];
  id: Scalars["ID"];
  name?: Maybe<Scalars["String"]>;
  resourceId?: Maybe<Scalars["String"]>;
  resourceType?: Maybe<Scalars["String"]>;
  updatedAt: Scalars["Datetime"];
  users?: Maybe<Array<User>>;
};

export type User = {
  __typename?: "User";
  createdAt: Scalars["Datetime"];
  displayName?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  identities?: Maybe<Array<Identity>>;
  news?: Maybe<Array<News>>;
  projects?: Maybe<Array<Project>>;
  roles: Role;
  updatedAt: Scalars["Datetime"];
};

export type AdminListProjectsQueryVariables = {
  first?: Maybe<Scalars["Int"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  last?: Maybe<Scalars["Int"]>;
  public?: Maybe<Scalars["Boolean"]>;
  order?: Maybe<ProjectOrder>;
};

export type AdminListProjectsQuery = { __typename?: "Query" } & {
  projects?: Maybe<
    { __typename?: "ProjectConnection" } & Pick<
      ProjectConnection,
      "totalCount"
    > & {
        nodes?: Maybe<
          Array<
            Maybe<
              { __typename?: "Project" } & Pick<Project, "id" | "slug"> & {
                  name: { __typename?: "LanguageString" } & Pick<
                    LanguageString,
                    "de" | "en"
                  >;
                  codeResources?: Maybe<
                    { __typename?: "CodeResourceConnection" } & Pick<
                      CodeResourceConnection,
                      "totalCount"
                    >
                  >;
                }
            >
          >
        >;
        pageInfo: { __typename?: "PageInfo" } & Pick<
          PageInfo,
          "hasPreviousPage" | "hasNextPage" | "startCursor" | "endCursor"
        >;
      }
  >;
};

export const AdminListProjectsDocument = gql`
  query AdminListProjects(
    $first: Int
    $after: String
    $before: String
    $last: Int
    $public: Boolean
    $order: ProjectOrder
  ) {
    projects(
      first: $first
      after: $after
      before: $before
      last: $last
      public: $public
      order: $order
    ) {
      nodes {
        id
        name {
          de
          en
        }
        slug
        codeResources {
          totalCount
        }
      }
      totalCount
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
    }
  }
`;

@Injectable({
  providedIn: "root",
})
export class AdminListProjectsGQL extends Apollo.Query<
  AdminListProjectsQuery,
  AdminListProjectsQueryVariables
> {
  document = AdminListProjectsDocument;
}
