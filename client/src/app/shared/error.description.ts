import { TokenErrorDescription } from './error.description';
/**
 * Matches the JSON generated by the server side Ruby Exception
 * `EsqulinoError` and must be manually kept in sync.
 */
export interface ServerErrorDescription {
  code: number;
  type: string;
  implError: boolean;
  message: string;
}

/**
 * Something went wrong when querying the database.
 */
export interface DatabaseQueryErrorDescription extends ServerErrorDescription {
  project: string;
  sql: string;
  params: any;
}

export interface TokenErrorDescription extends ServerErrorDescription {
  type: "AccessTokenError" | "RefreshTokenError"
  newUser: { }
}

export function isSessionExpiredErrorDescription(obj: any): obj is TokenErrorDescription {
  return (obj && (obj.type === "AccessTokenError" || obj.type === "RefreshTokenError" || obj.type === "AuthorizationError"));
}