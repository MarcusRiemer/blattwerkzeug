# Ugly hack to grab the correct path of the typescript-json-schema "binary"
# Taken from: http://blog.jgc.org/2007/01/what-makefile-am-i-in.html
where-am-i = $(dir $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))

# Path to the clients source and its project file
SRC_PATH = $(realpath ../../client/app/shared)
SRC_PROJECT = $(realpath ../../client/tsconfig.json)

# The absolute path of the directory the schemas reside in
SCHEMA_PATH = $(realpath $(call where-am-i))

# Full path of typescript-json-schema
TYPESCRIPT_JSON_SCHEMA_BIN = node --stack-size=65500 $(SCHEMA_PATH)/node_modules/typescript-json-schema/bin/typescript-json-schema
SCHEMA_OPTIONS = --refs true --aliasRefs --false --noExtraProps true

# Names of the schema files to generate
JSON_SCHEMA_FILE_NAMES = ProjectDescription.json ProjectListDescription.json QueryResultDescription.json QueryParamsDescription.json ArbitraryQueryRequestDescription.json QueryUpdateRequestDescription.json QueryDescription.json RequestErrorDescription.json PageDescription.json

# Paths of the schema files to generate
JSON_SCHEMA_FILES = $(addprefix $(SCHEMA_PATH)/, $(JSON_SCHEMA_FILE_NAMES))

##################################
# Not so nice: Repeated rules
##################################

# Okay, there is some ugly hackery going on here on multiple levels
# 1) Some names in esqulino are used multiple times, but imported with
#    a named alias. However, on the global scope these namens need to be
#    distuingished and the schema generator uses the filename for that.
# 2) We know that we only generate descriptions, where some names will
#    clash. But because we don't generate schema files for internal
#    structures, this clash actually does not matter.
# 3) Therefore, we can safely remove those path specifiers from the output.
#    Such a reference with a path specifier looks like this:
#    "$ref": "#/definitions/\"/home/marcus/projects/scratch-sql/client/app/shared/query.model\".Expression"
#


# For some reason I need FOUR backslashes to escape the one backslash at the
# beginning. I assume this is due to make AND bash stripping those
CONVERT_COMMAND = $(TYPESCRIPT_JSON_SCHEMA_BIN) $(SRC_PROJECT) $(notdir $(basename $@)) --out $@ $(SCHEMA_OPTIONS); \
	sed -i "s/\\\\\"\/\(.*\)\"\.//g" $@

$(SCHEMA_PATH)/ProjectDescription.json : $(SRC_PATH)/project.description.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/ProjectListDescription.json : $(SRC_PATH)/project.description.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/QueryDescription.json : $(SRC_PATH)/query.model.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/QueryUpdateRequestDescription.json : $(SRC_PATH)/query.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/QueryResultDescription.json : $(SRC_PATH)/query.result.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/RequestErrorDescription.json : $(SRC_PATH)/query.result.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/QueryParamsDescription.json : $(SRC_PATH)/query.result.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/ArbitraryQueryRequestDescription.json : $(SRC_PATH)/query.result.ts
	$(CONVERT_COMMAND)

$(SCHEMA_PATH)/PageDescription.json : $(SRC_PATH)/page/page.description.ts
	$(CONVERT_COMMAND)


# This rule would only work for files with identical names
$(SCHEMA_PATH)/%.json : $(SRC_PATH)/%.ts
	$(CONVERT_COMMAND)


# Ensure the typescript-json-schema "binary" is part of the node_modules folder
has-generator :
ifeq (, $(wildcard $(TYPESCRIPT_JSON_SCHEMA_BIN)))
	$(error "Typescript JSON schema generator not in node_modules")
endif

.PHONY :

