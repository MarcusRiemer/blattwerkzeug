{
  "$ref": "#/definitions/CodeResourceDescription",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "CodeResourceDescription": {
      "additionalProperties": false,
      "description": "A resource that is described by a syntaxtree.",
      "properties": {
        "ast": {
          "$ref": "#/definitions/NodeDescription"
        },
        "blockLanguageId": {
          "type": "string"
        },
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "id": {
          "description": "An internal ID, possibly a GUID, to uniquely identify a resource.\nThese IDs must *never* change and should be UUIDs, so that they are\nglobally unique.",
          "type": "string"
        },
        "name": {
          "description": "The user-chosen name of this resource. This property is free to change.",
          "type": "string"
        },
        "programmingLanguageId": {
          "type": "string"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        }
      },
      "required": [
        "blockLanguageId",
        "name",
        "programmingLanguageId"
      ],
      "type": "object"
    },
    "NodeDescription": {
      "additionalProperties": false,
      "description": "This description regulates how all ASTs should be stored when\nwritten to disk or sent over the wire. It requires every\nnode to at least tell its name and some hint how a node can be\nconstructed at runtime.\n\nThe data of a node is split up in two broader categories:\nChildren, which may be nested and properties, which should\nnot allow any nesting.",
      "properties": {
        "children": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/NodeDescription"
            },
            "type": "array"
          },
          "description": "Nodes may have children in various categories. This base class\nmakes no assumptions about the names of children. Examples for\nchildren in multiple categories would be things like \"attributes\"\nand generic \"children\" in a specialization for XML.",
          "type": "object"
        },
        "language": {
          "description": "This is effectively a namespace, allowing identical\nnames for nodes in different languages.",
          "type": "string"
        },
        "name": {
          "description": "The name of this not, this is used to lookup the name of a\ncorresponding type.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Nodes may have all kinds of properties that are specific to their\nconcrete use.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "language"
      ],
      "type": "object"
    }
  }
}