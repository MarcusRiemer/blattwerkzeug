{
  "$ref": "#/definitions/VisualisedLanguages",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "ChildCardinalityDescription": {
      "additionalProperties": false,
      "description": "Describes how often a certain type may appear in a sequence.",
      "properties": {
        "nodeType": {
          "$ref": "#/definitions/TypeReference"
        },
        "occurs": {
          "$ref": "#/definitions/OccursDescription"
        }
      },
      "required": [
        "nodeType",
        "occurs"
      ],
      "type": "object"
    },
    "EnumRestrictionDescription": {
      "additionalProperties": false,
      "description": "Restricts a string to be one of a given set of values",
      "properties": {
        "type": {
          "enum": [
            "enum"
          ],
          "type": "string"
        },
        "value": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "LengthRestrictionDescription": {
      "additionalProperties": false,
      "description": "Restricts the maximum length of things.",
      "properties": {
        "type": {
          "enum": [
            "length"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "MaxInclusiveRestriction": {
      "additionalProperties": false,
      "description": "Restricts the maximum numerical value.",
      "properties": {
        "type": {
          "enum": [
            "maxInclusive"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "MaximumLengthRestrictionDescription": {
      "additionalProperties": false,
      "description": "Restricts the maximum length of things.",
      "properties": {
        "type": {
          "enum": [
            "maxLength"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "MinInclusiveRestriction": {
      "additionalProperties": false,
      "description": "Restricts the minimum numerical value.",
      "properties": {
        "type": {
          "enum": [
            "minInclusive"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "MinimumLengthRestrictionDescription": {
      "additionalProperties": false,
      "description": "Restricts the minimum length of things.",
      "properties": {
        "type": {
          "enum": [
            "minLength"
          ],
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "NodeAttributeDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/NodePropertyTypeDescription"
        },
        {
          "$ref": "#/definitions/NodeInterpolatePropertyDescription"
        },
        {
          "$ref": "#/definitions/NodeInterpolateChildrenDescription"
        },
        {
          "$ref": "#/definitions/NodeChildrenGroupDescription"
        },
        {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        {
          "$ref": "#/definitions/NodeVisualContainerDescription"
        }
      ],
      "description": "Attributes of a node may be:\n- validation atoms like properties\n- children\n- references to other resources\n- visual cues like terminals or rows."
    },
    "NodeChildrenGroupDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/NodeTypesSequenceDescription"
        },
        {
          "$ref": "#/definitions/NodeTypesAllowedDescription"
        },
        {
          "$ref": "#/definitions/NodeTypesChoiceDescription"
        },
        {
          "$ref": "#/definitions/NodeTypesParenthesesDescription"
        }
      ],
      "description": "All children group types that are available"
    },
    "NodeIntegerTypeRestrictions": {
      "anyOf": [
        {
          "$ref": "#/definitions/MinInclusiveRestriction"
        },
        {
          "$ref": "#/definitions/MaxInclusiveRestriction"
        }
      ],
      "description": "The restrictions that are applicable to integers"
    },
    "NodeInterpolateChildrenDescription": {
      "additionalProperties": false,
      "description": "References an existing child group on this node",
      "properties": {
        "between": {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "each"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "NodeInterpolatePropertyDescription": {
      "additionalProperties": false,
      "description": "References an existing property on this node. This is useful for languages\nthat have some kind of reference to a common name in opening and closing\ncontexts (eg. XML with _the-name__/the-name_).",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "interpolate"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "NodePropertyBooleanDescription": {
      "additionalProperties": false,
      "description": "Denotes a \"boolean\" type.",
      "properties": {
        "base": {
          "enum": [
            "boolean"
          ],
          "type": "string"
        },
        "isOptional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "property"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "base"
      ],
      "type": "object"
    },
    "NodePropertyIntegerDescription": {
      "additionalProperties": false,
      "description": "Describes the \"Integer\" type and describes how it can be restricted.",
      "properties": {
        "base": {
          "enum": [
            "integer"
          ],
          "type": "string"
        },
        "isOptional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "restrictions": {
          "items": {
            "$ref": "#/definitions/NodeIntegerTypeRestrictions"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "property"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "base"
      ],
      "type": "object"
    },
    "NodePropertyReferenceDescription": {
      "additionalProperties": false,
      "description": "A value that must reference another grammar or coderesource",
      "properties": {
        "base": {
          "enum": [
            "grammarReference",
            "codeResourceReference"
          ],
          "type": "string"
        },
        "isOptional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "property"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "base"
      ],
      "type": "object"
    },
    "NodePropertyStringDescription": {
      "additionalProperties": false,
      "description": "Denotes the \"string\" type and describes ways it can be further restricted.",
      "properties": {
        "base": {
          "enum": [
            "string"
          ],
          "type": "string"
        },
        "isOptional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "restrictions": {
          "items": {
            "$ref": "#/definitions/NodeStringTypeRestrictions"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "property"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "base"
      ],
      "type": "object"
    },
    "NodePropertyTypeDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/NodePropertyBooleanDescription"
        },
        {
          "$ref": "#/definitions/NodePropertyIntegerDescription"
        },
        {
          "$ref": "#/definitions/NodePropertyStringDescription"
        },
        {
          "$ref": "#/definitions/NodePropertyReferenceDescription"
        }
      ],
      "description": "Properties are used for atomic values and may be optional."
    },
    "NodeStringTypeRestrictions": {
      "anyOf": [
        {
          "$ref": "#/definitions/LengthRestrictionDescription"
        },
        {
          "$ref": "#/definitions/MinimumLengthRestrictionDescription"
        },
        {
          "$ref": "#/definitions/MaximumLengthRestrictionDescription"
        },
        {
          "$ref": "#/definitions/EnumRestrictionDescription"
        },
        {
          "$ref": "#/definitions/RegularExpressionRestrictionDescription"
        }
      ],
      "description": "The restrictions that are applicable to strings"
    },
    "NodeTerminalSymbolDescription": {
      "additionalProperties": false,
      "description": "A terminal symbol that would be expected.",
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagDescription"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "terminal"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "symbol"
      ],
      "type": "object"
    },
    "NodeTypesAllowedDescription": {
      "additionalProperties": false,
      "description": "Every immediate child must be part of this list of allowed types. The order\nin which these children appear in is not relevant.",
      "properties": {
        "between": {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        "name": {
          "type": "string"
        },
        "nodeTypes": {
          "items": {
            "$ref": "#/definitions/NodeTypesChildReference"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "allowed"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "nodeTypes"
      ],
      "type": "object"
    },
    "NodeTypesChildReference": {
      "anyOf": [
        {
          "$ref": "#/definitions/TypeReference"
        },
        {
          "$ref": "#/definitions/ChildCardinalityDescription"
        }
      ],
      "description": "A simple type reference is a shortcut for an element with\nminOccurs = 1 and maxOccurs = 1;"
    },
    "NodeTypesChoiceDescription": {
      "additionalProperties": false,
      "description": "Tries the given operators in the order they appear in. If any of them is\nsatisfied, the child group is considered valid.",
      "properties": {
        "choices": {
          "items": {
            "$ref": "#/definitions/TypeReference"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "choice"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "choices"
      ],
      "type": "object"
    },
    "NodeTypesParenthesesDescription": {
      "additionalProperties": false,
      "description": "Allows to group different children together and to\napply a cardinality to them. Mixing different child group semantics is explicitly\nforbidden, each group may be either nothing but \"allowed\" or nothing but \"sequence\"\ncombinators.",
      "properties": {
        "between": {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        "cardinality": {
          "$ref": "#/definitions/OccursDescription"
        },
        "group": {
          "additionalProperties": false,
          "properties": {
            "nodeTypes": {
              "items": {
                "$ref": "#/definitions/NodeTypesChildReference"
              },
              "type": "array"
            },
            "type": {
              "enum": [
                "sequence",
                "allowed"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "nodeTypes"
          ],
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "parentheses"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "group",
        "cardinality"
      ],
      "type": "object"
    },
    "NodeTypesSequenceDescription": {
      "additionalProperties": false,
      "description": "In a sequence every child must occur in exact the order and cardinality\nthat is specified by this description.",
      "properties": {
        "between": {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        "name": {
          "type": "string"
        },
        "nodeTypes": {
          "items": {
            "$ref": "#/definitions/NodeTypesChildReference"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "sequence"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "nodeTypes"
      ],
      "type": "object"
    },
    "NodeVisualContainerDescription": {
      "additionalProperties": false,
      "description": "Groups together various nodes in a certain kind of layout.",
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/NodeAttributeDescription"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "orientation": {
          "$ref": "#/definitions/Orientation"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "container"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "orientation",
        "children"
      ],
      "type": "object"
    },
    "NodeVisualTypeDescription": {
      "additionalProperties": false,
      "properties": {
        "attributes": {
          "items": {
            "$ref": "#/definitions/VisualNodeAttributeDescription"
          },
          "type": "array"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagDescription"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "visualize"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "attributes"
      ],
      "type": "object"
    },
    "OccursDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/OccursString"
        },
        {
          "$ref": "#/definitions/OccursSpecificDescription"
        }
      ],
      "description": "Describes limits for occurences."
    },
    "OccursSpecificDescription": {
      "additionalProperties": false,
      "description": "A verbos definition of minimum and maximum occurences.",
      "properties": {
        "maxOccurs": {
          "type": "number"
        },
        "minOccurs": {
          "type": "number"
        }
      },
      "required": [
        "minOccurs",
        "maxOccurs"
      ],
      "type": "object"
    },
    "OccursString": {
      "enum": [
        "1",
        "?",
        "+",
        "*"
      ],
      "type": "string"
    },
    "Orientation": {
      "enum": [
        "horizontal",
        "vertical"
      ],
      "type": "string"
    },
    "QualifiedTypeName": {
      "additionalProperties": false,
      "description": "Used when refererring to types that are defined other languages.",
      "properties": {
        "languageName": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        }
      },
      "required": [
        "typeName",
        "languageName"
      ],
      "type": "object"
    },
    "RegularExpressionRestrictionDescription": {
      "additionalProperties": false,
      "description": "Restricts to match a regular expression",
      "properties": {
        "type": {
          "enum": [
            "regex"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "TagDescription": {
      "type": "string"
    },
    "TypeReference": {
      "anyOf": [
        {
          "$ref": "#/definitions/QualifiedTypeName"
        },
        {
          "type": "string"
        }
      ],
      "description": "Simple strings are used to refer to local types that share the\nsame language name."
    },
    "VisualNodeAttributeDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/NodeTerminalSymbolDescription"
        },
        {
          "$ref": "#/definitions/NodeVisualContainerDescription"
        },
        {
          "$ref": "#/definitions/NodeInterpolatePropertyDescription"
        },
        {
          "$ref": "#/definitions/NodeInterpolateChildrenDescription"
        }
      ],
      "description": "These attributes are available when visualizing things"
    },
    "VisualisedLanguages": {
      "additionalProperties": {
        "$ref": "#/definitions/VisualizedTypes"
      },
      "description": "Multiple languages with visualizations",
      "type": "object"
    },
    "VisualizedTypes": {
      "additionalProperties": {
        "$ref": "#/definitions/NodeVisualTypeDescription"
      },
      "description": "Visualizations for a single language",
      "type": "object"
    }
  }
}