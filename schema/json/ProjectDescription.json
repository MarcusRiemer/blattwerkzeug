{
  "$ref": "#/definitions/ProjectDescription",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "ApiVersionToken": {
      "description": "It would be nicer if versions could be numbers, but Typescript has no\nconcept of union types for numbers.",
      "enum": [
        "1",
        "2",
        "3",
        "4"
      ],
      "type": "string"
    },
    "AvailableDatabaseDescription": {
      "additionalProperties": false,
      "description": "Describes a database that could possibly be used.",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "BinaryExpression": {
      "additionalProperties": false,
      "description": "Combines two expressions with a binary operator.",
      "properties": {
        "lhs": {
          "$ref": "#/definitions/Expression"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "rhs": {
          "$ref": "#/definitions/Expression"
        },
        "simple": {
          "type": "boolean"
        }
      },
      "required": [
        "lhs",
        "operator",
        "rhs",
        "simple"
      ],
      "type": "object"
    },
    "BlockLanguageDescription": {
      "additionalProperties": false,
      "description": "Augments a language with information about the UI layer.",
      "properties": {
        "editorBlocks": {
          "description": "How blocks should be represented in the drag & drop editor.",
          "items": {
            "$ref": "#/definitions/EditorBlockDescription"
          },
          "type": "array"
        },
        "id": {
          "description": "The internal ID of this language model.",
          "type": "string"
        },
        "name": {
          "description": "The name that should be displayed to the user.",
          "type": "string"
        },
        "sidebars": {
          "description": "How the available blocks should be represented in the sidebar.",
          "items": {
            "$ref": "#/definitions/FixedBlocksSidebarDescription"
          },
          "type": "array"
        },
        "slug": {
          "description": "A unique (but possibly empty) id. If this is undefined the language has\nno builtin counterpart on the client.",
          "type": "string"
        }
      },
      "required": [
        "editorBlocks",
        "id",
        "name",
        "sidebars"
      ],
      "type": "object"
    },
    "BodyDescription": {
      "additionalProperties": false,
      "description": "The body of an HTML page, will only appear once in a page.",
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/WidgetDescription"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "body"
          ],
          "type": "string"
        }
      },
      "required": [
        "children",
        "type"
      ],
      "type": "object"
    },
    "CodeResourceDescription": {
      "additionalProperties": false,
      "description": "A resource that is described by a syntaxtree.",
      "properties": {
        "ast": {
          "$ref": "#/definitions/NodeDescription"
        },
        "blockLanguageId": {
          "type": "string"
        },
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "id": {
          "description": "An internal ID, possibly a GUID, to uniquely identify a resource.\nThese IDs must *never* change and should be UUIDs, so that they are\nglobally unique.",
          "type": "string"
        },
        "name": {
          "description": "The user-chosen name of this resource. This property is free to change.",
          "type": "string"
        },
        "programmingLanguageId": {
          "type": "string"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        }
      },
      "required": [
        "blockLanguageId",
        "name",
        "programmingLanguageId"
      ],
      "type": "object"
    },
    "ColumnAssignment": {
      "additionalProperties": false,
      "description": "An expression that will be assigned to a certain column.",
      "properties": {
        "column": {
          "type": "string"
        },
        "expr": {
          "$ref": "#/definitions/Expression"
        }
      },
      "required": [
        "column",
        "expr"
      ],
      "type": "object"
    },
    "ColumnDescription": {
      "additionalProperties": false,
      "description": "The \"over-the-wire\" description of a single column\ninside a table.",
      "properties": {
        "dflt_value": {
          "type": "string"
        },
        "index": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "not_null": {
          "type": "boolean"
        },
        "primary": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "index",
        "name",
        "type",
        "not_null",
        "primary"
      ],
      "type": "object"
    },
    "ConstantExpression": {
      "additionalProperties": false,
      "description": "The other \"typical\" leaf, a compile time expression that also\nends recursion.",
      "properties": {
        "type": {
          "$ref": "#/definitions/DataType"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "DataType": {
      "description": "Basic data types as inspired by SQLite.",
      "enum": [
        "INTEGER",
        "REAL",
        "TEXT"
      ],
      "type": "string"
    },
    "Delete": {
      "additionalProperties": false,
      "description": "There doesn't seem to be any data associated with the\nSQLite DELETE keyword itself. But it didn't seem practical\nto go with a \"simple\" type that breaks the \"normal\" \nstructure of the model.",
      "type": "object"
    },
    "EditorBlockDescription": {
      "additionalProperties": false,
      "description": "Describes how certain nodes in the syntaxtree should be presented\nto an end user inside the drag & drop interface.",
      "properties": {
        "describedType": {
          "$ref": "#/definitions/QualifiedTypeName",
          "description": "Nodes of this type are presented using this block."
        },
        "visual": {
          "description": "The actual visual representation.",
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        }
      },
      "required": [
        "describedType",
        "visual"
      ],
      "type": "object"
    },
    "Expression": {
      "additionalProperties": false,
      "description": "We use a single base type for all kinds of expression, as\nthis vastly simplifies the storage process. Each kind of\nconcrete expression is stored under a key. Only one of these\nkeys may be set at runtime.",
      "properties": {
        "binary": {
          "$ref": "#/definitions/BinaryExpression"
        },
        "constant": {
          "$ref": "#/definitions/ConstantExpression"
        },
        "missing": {
          "$ref": "#/definitions/MissingExpression"
        },
        "parameter": {
          "$ref": "#/definitions/ParameterExpression"
        },
        "singleColumn": {
          "$ref": "#/definitions/SingleColumnExpression"
        },
        "star": {
          "$ref": "#/definitions/StarExpression"
        }
      },
      "type": "object"
    },
    "FixedBlocksSidebarCategoryDescription": {
      "additionalProperties": false,
      "description": "Defines which blocks to show in a certain category.",
      "properties": {
        "blocks": {
          "items": {
            "$ref": "#/definitions/SidebarBlockDescription"
          },
          "type": "array"
        },
        "categoryCaption": {
          "type": "string"
        }
      },
      "required": [
        "categoryCaption",
        "blocks"
      ],
      "type": "object"
    },
    "FixedBlocksSidebarDescription": {
      "additionalProperties": false,
      "description": "Defines the overall look of a sidebar. It at least sorts available blocks\ninto categories.",
      "properties": {
        "caption": {
          "description": "The name that should be displayed to the user.",
          "type": "string"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/FixedBlocksSidebarCategoryDescription"
          },
          "type": "array"
        }
      },
      "required": [
        "caption",
        "categories"
      ],
      "type": "object"
    },
    "ForeignKeyDescription": {
      "additionalProperties": false,
      "properties": {
        "references": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "from_column": {
                "type": "string"
              },
              "to_column": {
                "type": "string"
              },
              "to_table": {
                "type": "string"
              }
            },
            "required": [
              "to_table",
              "from_column",
              "to_column"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "references"
      ],
      "type": "object"
    },
    "From": {
      "additionalProperties": false,
      "properties": {
        "first": {
          "$ref": "#/definitions/TableNameDefinition"
        },
        "joins": {
          "items": {
            "$ref": "#/definitions/Join"
          },
          "type": "array"
        }
      },
      "required": [
        "first"
      ],
      "type": "object"
    },
    "InnerJoinType": {
      "description": "Types of INNER JOINs",
      "enum": [
        "cross",
        "comma"
      ],
      "type": "string"
    },
    "Insert": {
      "additionalProperties": false,
      "description": "A complete INSERT statement. Technically this does not \nrequire any other component, although the use of\nexpressions is common.",
      "properties": {
        "assignments": {
          "items": {
            "$ref": "#/definitions/ColumnAssignment"
          },
          "type": "array"
        },
        "table": {
          "type": "string"
        }
      },
      "required": [
        "table",
        "assignments"
      ],
      "type": "object"
    },
    "Join": {
      "additionalProperties": false,
      "properties": {
        "cross": {
          "$ref": "#/definitions/InnerJoinType"
        },
        "inner": {
          "additionalProperties": false,
          "properties": {
            "on": {
              "$ref": "#/definitions/Expression"
            },
            "using": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "table": {
          "$ref": "#/definitions/TableNameDefinition"
        }
      },
      "required": [
        "table"
      ],
      "type": "object"
    },
    "LogicalOperator": {
      "enum": [
        "AND",
        "OR"
      ],
      "type": "string"
    },
    "MissingExpression": {
      "additionalProperties": false,
      "description": "Denotes an expression that is intentionally missing.",
      "type": "object"
    },
    "NodeDescription": {
      "additionalProperties": false,
      "description": "This description regulates how all ASTs should be stored when\nwritten to disk or sent over the wire. It requires every\nnode to at least tell its name and some hint how a node can be\nconstructed at runtime.\n\nThe data of a node is split up in two broader categories:\nChildren, which may be nested and properties, which should\nnot allow any nesting.",
      "properties": {
        "children": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/NodeDescription"
            },
            "type": "array"
          },
          "description": "Nodes may have children in various categories. This base class\nmakes no assumptions about the names of children. Examples for\nchildren in multiple categories would be things like \"attributes\"\nand generic \"children\" in a specialization for XML.",
          "type": "object"
        },
        "language": {
          "description": "This is effectively a namespace, allowing identical\nnames for nodes in different languages.",
          "type": "string"
        },
        "name": {
          "description": "The name of this not, this is used to lookup the name of a\ncorresponding type.",
          "type": "string"
        },
        "properties": {
          "description": "Nodes may have all kinds of properties that are specific to their\nconcrete use.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "language"
      ],
      "type": "object"
    },
    "Operator": {
      "enum": [
        "<",
        "<=",
        "=",
        "<>",
        ">=",
        ">",
        "LIKE",
        "+",
        "-",
        "*",
        "/"
      ],
      "type": "string"
    },
    "PageDescription": {
      "additionalProperties": false,
      "description": "Describes a page as a whole",
      "properties": {
        "body": {
          "$ref": "#/definitions/BodyDescription",
          "description": "The host for all widgets that are part of this page."
        },
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "id": {
          "description": "An internal ID, possibly a GUID, to uniquely identify a resource.\nThese IDs must *never* change and should be UUIDs, so that they are\nglobally unique.",
          "type": "string"
        },
        "name": {
          "description": "The user-chosen name of this resource. This property is free to change.",
          "type": "string"
        },
        "parameters": {
          "description": "All parameters that are required to render this page. These\nare usually satisfied via GET parameters",
          "items": {
            "$ref": "#/definitions/PageParameterDescription"
          },
          "type": "array"
        },
        "referencedQueries": {
          "description": "IDs of queries that are referenced in this page. Only\nthese queries provide additional DB information that can\nbe used on this page.",
          "items": {
            "$ref": "#/definitions/QueryReferenceDescription"
          },
          "type": "array"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "PageParameterDescription": {
      "additionalProperties": false,
      "description": "A parameter that is required to render a page.",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ParameterExpression": {
      "additionalProperties": false,
      "description": "Denotes a value that needs to be bound at the runtime of the query.",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "ProjectDescription": {
      "additionalProperties": false,
      "description": "The properties of a project that can be queried from the\nserver when asking for a specific project.\n\nOnly contains publically visible data, not the\npassword or other private information.",
      "properties": {
        "activeDatabase": {
          "type": "string"
        },
        "apiVersion": {
          "$ref": "#/definitions/ApiVersionToken",
          "description": "These API versions are merely a number, no need to overcomplicate things.\nIf versions differ, any implementing the API is free to specify\nversion ranges it works with."
        },
        "availableDatabases": {
          "additionalProperties": {
            "$ref": "#/definitions/AvailableDatabaseDescription"
          },
          "type": "object"
        },
        "blockLanguages": {
          "items": {
            "$ref": "#/definitions/BlockLanguageDescription"
          },
          "type": "array"
        },
        "codeResources": {
          "items": {
            "$ref": "#/definitions/CodeResourceDescription"
          },
          "type": "array"
        },
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "indexPageId": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/ProjectName"
        },
        "pages": {
          "items": {
            "$ref": "#/definitions/PageDescription"
          },
          "type": "array"
        },
        "preview": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "queries": {
          "items": {
            "$ref": "#/definitions/QueryDescription"
          },
          "type": "array"
        },
        "schema": {
          "items": {
            "$ref": "#/definitions/TableDescription"
          },
          "type": "array"
        },
        "slug": {
          "$ref": "#/definitions/ProjectSlug"
        },
        "sources": {
          "items": {
            "$ref": "#/definitions/ProjectSourceDescription"
          },
          "type": "array"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "description",
        "id",
        "name",
        "slug"
      ],
      "type": "object"
    },
    "ProjectName": {
      "description": "The name of the project. May only contain more or less friendly\ncharacters.",
      "pattern": "^[a-zA-Z0-9 \\-_\\?äöüÄÖÜß:]{4,}$",
      "type": "string"
    },
    "ProjectSlug": {
      "description": "The url-friendly name of the project. May only contain characters that do not\nmean any trouble in URLs.",
      "pattern": "^[a-z0-9\\-]{4,}$",
      "type": "string"
    },
    "ProjectSourceDescription": {
      "additionalProperties": false,
      "description": "Some projects are based on external sources, especially regarding\nthe data in the databases. These references may be used to\ncorrectly acknowledge such sources.",
      "properties": {
        "display": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "data"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "url",
        "display",
        "readOnly"
      ],
      "type": "object"
    },
    "QualifiedTypeName": {
      "additionalProperties": false,
      "description": "Used when refererring to types that are defined other languages.",
      "properties": {
        "languageName": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        }
      },
      "required": [
        "typeName",
        "languageName"
      ],
      "type": "object"
    },
    "QueryDescription": {
      "additionalProperties": false,
      "description": "Outermost description of a query. This contains\nthe whole structure and some identifying properties.",
      "properties": {
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "delete": {
          "$ref": "#/definitions/Delete"
        },
        "from": {
          "$ref": "#/definitions/From"
        },
        "id": {
          "description": "An internal ID, possibly a GUID, to uniquely identify a resource.\nThese IDs must *never* change and should be UUIDs, so that they are\nglobally unique.",
          "type": "string"
        },
        "insert": {
          "$ref": "#/definitions/Insert"
        },
        "name": {
          "description": "The user-chosen name of this resource. This property is free to change.",
          "type": "string"
        },
        "select": {
          "$ref": "#/definitions/Select"
        },
        "singleRow": {
          "type": "boolean"
        },
        "update": {
          "$ref": "#/definitions/Update"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        },
        "where": {
          "$ref": "#/definitions/Where"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "QueryReferenceDescription": {
      "additionalProperties": false,
      "description": "Referenced queries are possibly accompanied by a human-readable\nname. This is required if the same query is going to be used\nmultiple times on a single page.",
      "properties": {
        "name": {
          "type": "string"
        },
        "queryId": {
          "type": "string"
        },
        "type": {
          "enum": [
            "query"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Select": {
      "additionalProperties": false,
      "properties": {
        "columns": {
          "items": {
            "$ref": "#/definitions/SelectColumn"
          },
          "type": "array"
        }
      },
      "required": [
        "columns"
      ],
      "type": "object"
    },
    "SelectColumn": {
      "additionalProperties": false,
      "properties": {
        "as": {
          "type": "string"
        },
        "expr": {
          "$ref": "#/definitions/Expression"
        }
      },
      "required": [
        "expr"
      ],
      "type": "object"
    },
    "SidebarBlockDescription": {
      "additionalProperties": false,
      "description": "Describes how the available types should be represented in the sidebar.\nIt is perfectly fine to have multiple sidebar descriptions for the\nsame underlying type.",
      "properties": {
        "defaultNode": {
          "$ref": "#/definitions/NodeDescription",
          "description": "This description will be instanciated every time an \"empty\" node\nis needed. This happens e.g. when the user starts dragging this\nblock from the sidebar."
        },
        "displayName": {
          "description": "The name to be displayed in the sidebar",
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "defaultNode"
      ],
      "type": "object"
    },
    "SingleColumnExpression": {
      "additionalProperties": false,
      "description": "One \"typical\" logical leaf of an expression tree, postpones\nthe actual value lookup to execution time and ends recursion.",
      "properties": {
        "alias": {
          "type": "string"
        },
        "column": {
          "type": "string"
        },
        "table": {
          "type": "string"
        }
      },
      "required": [
        "column"
      ],
      "type": "object"
    },
    "StarExpression": {
      "additionalProperties": false,
      "description": "Denotes a *-Expression, that may be limited to a subset of\nexisting tables.",
      "properties": {
        "limitedTo": {
          "$ref": "#/definitions/TableNameDefinition"
        }
      },
      "type": "object"
    },
    "TableDescription": {
      "additionalProperties": false,
      "description": "The \"over-the-wire\" description of a single table \nwith all of its columns.",
      "properties": {
        "columns": {
          "items": {
            "$ref": "#/definitions/ColumnDescription"
          },
          "type": "array"
        },
        "foreign_keys": {
          "items": {
            "$ref": "#/definitions/ForeignKeyDescription"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "system_table": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "columns",
        "foreign_keys"
      ],
      "type": "object"
    },
    "TableNameDefinition": {
      "additionalProperties": false,
      "description": "Named tables as described in the FROM",
      "properties": {
        "alias": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Update": {
      "additionalProperties": false,
      "description": "The column-expression pairs and the table that define the\nUPDATE component.",
      "properties": {
        "assignments": {
          "items": {
            "$ref": "#/definitions/ColumnAssignment"
          },
          "type": "array"
        },
        "table": {
          "type": "string"
        }
      },
      "required": [
        "table",
        "assignments"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.BlockStyle": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "We currently allow any CSS style to be used.",
      "type": "object"
    },
    "VisualBlockDescriptions.CategoryInsert": {
      "additionalProperties": false,
      "properties": {
        "category": {
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsertPosition"
        }
      },
      "required": [
        "order",
        "category"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.CategoryInsertPosition": {
      "description": "The locations of categories at which insertions may occur.",
      "enum": [
        "insertFirst",
        "insertLast"
      ],
      "type": "string"
    },
    "VisualBlockDescriptions.ConcreteBlock": {
      "anyOf": [
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorBlock"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorDropTarget"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorIterator"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorConstant"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorInterpolated"
        }
      ]
    },
    "VisualBlockDescriptions.DropTargetProperties": {
      "additionalProperties": false,
      "description": "These properties are required to specify drop targets.",
      "properties": {
        "children": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsert"
        },
        "parent": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsert"
        },
        "self": {
          "additionalProperties": false,
          "properties": {
            "order": {
              "enum": [
                "insertBefore",
                "insertAfter"
              ],
              "type": "string"
            },
            "skipParents": {
              "type": "number"
            }
          },
          "required": [
            "order",
            "skipParents"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "VisualBlockDescriptions.EditorBlock": {
      "additionalProperties": false,
      "description": "Describes how a certain block should be represented. Blocks are\nalways draggable and also possible drop targets.",
      "properties": {
        "blockType": {
          "enum": [
            "block"
          ],
          "type": "string"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "dropAction": {
          "enum": [
            "append",
            "replace"
          ],
          "type": "string"
        },
        "dropTarget": {
          "$ref": "#/definitions/VisualBlockDescriptions.DropTargetProperties"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "direction"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorConstant": {
      "additionalProperties": false,
      "description": "Displays a constant value that does not allow any user interaction.",
      "properties": {
        "blockType": {
          "enum": [
            "constant"
          ],
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        },
        "text": {
          "type": "string"
        }
      },
      "required": [
        "blockType",
        "text"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorDropTarget": {
      "additionalProperties": false,
      "description": "Describes a \"block\" that only acts as a hole to drop things at.\nIt is not necesarily visible in every state and it is not draggable.",
      "properties": {
        "blockType": {
          "enum": [
            "dropTarget"
          ],
          "type": "string"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "dropTarget": {
          "$ref": "#/definitions/VisualBlockDescriptions.DropTargetProperties"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        },
        "visibility": {
          "items": [
            {
              "enum": [
                "ifAnyDrag",
                "ifLegalDrag",
                "ifLegalChild",
                "ifEmpty",
                "always"
              ],
              "type": "string"
            }
          ],
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "blockType",
        "direction",
        "visibility"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorInterpolated": {
      "additionalProperties": false,
      "description": "Displays a dynamic value that depends on some property of the node but\ndoes not allow to edit the property.",
      "properties": {
        "blockType": {
          "enum": [
            "interpolated"
          ],
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "property"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorIterator": {
      "additionalProperties": false,
      "description": "Allows to iterate over all blocks in a certain category.",
      "properties": {
        "between": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "blockType": {
          "enum": [
            "iterator"
          ],
          "type": "string"
        },
        "childGroupName": {
          "type": "string"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "childGroupName",
        "direction"
      ],
      "type": "object"
    },
    "Where": {
      "additionalProperties": false,
      "description": "A WHERE component with at least one expression.",
      "properties": {
        "first": {
          "$ref": "#/definitions/Expression"
        },
        "following": {
          "items": {
            "$ref": "#/definitions/WhereSubsequent"
          },
          "type": "array"
        }
      },
      "required": [
        "first"
      ],
      "type": "object"
    },
    "WhereSubsequent": {
      "additionalProperties": false,
      "description": "All Expressions after the first in a WHERE clause need the\nlogical operation defined. This is redundant, as the \nBinaryExpression would be perfectly capable of expressing\narbitrarily deep nested logical expressions, but in that\ncase the UI would be less then thrilling.",
      "properties": {
        "expr": {
          "$ref": "#/definitions/Expression"
        },
        "logical": {
          "$ref": "#/definitions/LogicalOperator"
        }
      },
      "required": [
        "expr",
        "logical"
      ],
      "type": "object"
    },
    "WidgetDescription": {
      "description": "A widget **requires** at least a type, all other fields are\nmandated by deriving descriptions. As we don't necesarily\nknow all deriving classes at compile time (they could be\nprovided by a plugin) we poke a hole in the type system\nhere.\n\nThe following annotion is required to allow additional\nproperties in the automatically generated JSON schema, see\nhttps://github.com/YousefED/typescript-json-schema/issues/44",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  }
}