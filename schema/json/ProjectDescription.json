{
  "$ref": "#/definitions/ProjectDescription",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "ApiVersionToken": {
      "description": "It would be nicer if versions could be numbers, but Typescript has no\nconcept of union types for numbers.",
      "enum": [
        "1",
        "2",
        "3",
        "4"
      ],
      "type": "string"
    },
    "AvailableDatabaseDescription": {
      "additionalProperties": false,
      "description": "Describes a database that could possibly be used.",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "BlockLanguageDescription": {
      "additionalProperties": false,
      "description": "Augments a language with information about the UI layer. This definition is\nused by the editors, especially the block editor, to show customized editors\nfor different languages. These customizations include:\n\n* The blocks that are shown in the sidebar.\n* Possibly language specific sidebars.\n* Definitions of the actual blocks.\n* Possibly language specific editor components.",
      "properties": {
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "defaultProgrammingLanguageId": {
          "description": "The programming language this block language uses by default.",
          "type": "string"
        },
        "editorBlocks": {
          "description": "How blocks should be represented in the drag & drop editor.",
          "items": {
            "$ref": "#/definitions/EditorBlockDescription"
          },
          "type": "array"
        },
        "editorComponents": {
          "description": "Specialised components that should be shown for this block\nlanguage.",
          "items": {
            "$ref": "#/definitions/EditorComponentDescription"
          },
          "type": "array"
        },
        "id": {
          "description": "The internal ID of this language model.",
          "type": "string"
        },
        "name": {
          "description": "The name that should be displayed to the user.",
          "type": "string"
        },
        "sidebars": {
          "description": "How the available blocks should be represented in the sidebar.",
          "items": {
            "$ref": "#/definitions/SidebarDescription"
          },
          "type": "array"
        },
        "slug": {
          "description": "A unique (but possibly empty) id. If this is undefined the language has\nno builtin counterpart on the client.",
          "type": "string"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        }
      },
      "required": [
        "defaultProgrammingLanguageId",
        "editorBlocks",
        "editorComponents",
        "id",
        "name",
        "sidebars"
      ],
      "type": "object"
    },
    "CodeResourceDescription": {
      "additionalProperties": false,
      "description": "A resource that is described by a syntaxtree.",
      "properties": {
        "ast": {
          "$ref": "#/definitions/NodeDescription"
        },
        "blockLanguageId": {
          "type": "string"
        },
        "createdAt": {
          "description": "Date & time this resource was created",
          "type": "string"
        },
        "id": {
          "description": "An internal ID, possibly a GUID, to uniquely identify a resource.\nThese IDs must *never* change and should be UUIDs, so that they are\nglobally unique.",
          "type": "string"
        },
        "name": {
          "description": "The user-chosen name of this resource. This property is free to change.",
          "type": "string"
        },
        "programmingLanguageId": {
          "type": "string"
        },
        "updatedAt": {
          "description": "Date & time this resource was updated the last time",
          "type": "string"
        }
      },
      "required": [
        "blockLanguageId",
        "name",
        "programmingLanguageId"
      ],
      "type": "object"
    },
    "ColumnDescription": {
      "additionalProperties": false,
      "description": "The \"over-the-wire\" description of a single column\ninside a table.",
      "properties": {
        "dflt_value": {
          "type": "string"
        },
        "index": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "not_null": {
          "type": "boolean"
        },
        "primary": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "index",
        "name",
        "type",
        "not_null",
        "primary"
      ],
      "type": "object"
    },
    "DatabaseSchemaSidebarDescription": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "Unique identification for this type.",
          "enum": [
            "databaseSchema"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "EditorBlockDescription": {
      "additionalProperties": false,
      "description": "Describes how certain nodes in the syntaxtree should be presented\nto an end user inside the drag & drop interface.",
      "properties": {
        "describedType": {
          "$ref": "#/definitions/QualifiedTypeName",
          "description": "Nodes of this type are presented using this block."
        },
        "visual": {
          "description": "The actual visual representation.",
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        }
      },
      "required": [
        "describedType",
        "visual"
      ],
      "type": "object"
    },
    "EditorComponentDescription": {
      "$ref": "#/definitions/QueryPreviewComponentDescription",
      "description": "Any component that could be displayed in the actual editor view."
    },
    "FixedBlocksSidebarCategoryDescription": {
      "additionalProperties": false,
      "description": "Defines which blocks to show in a certain category.",
      "properties": {
        "blocks": {
          "items": {
            "$ref": "#/definitions/SidebarBlockDescription"
          },
          "type": "array"
        },
        "categoryCaption": {
          "type": "string"
        }
      },
      "required": [
        "categoryCaption",
        "blocks"
      ],
      "type": "object"
    },
    "FixedBlocksSidebarDescription": {
      "additionalProperties": false,
      "description": "Defines the overall look of a sidebar. It at least sorts available blocks\ninto categories.",
      "properties": {
        "caption": {
          "description": "The name that should be displayed to the user.",
          "type": "string"
        },
        "categories": {
          "description": "The actual blocks are categorized into categories.",
          "items": {
            "$ref": "#/definitions/FixedBlocksSidebarCategoryDescription"
          },
          "type": "array"
        },
        "type": {
          "description": "Unique identification for this type.",
          "enum": [
            "fixedBlocks"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "caption",
        "categories"
      ],
      "type": "object"
    },
    "ForeignKeyDescription": {
      "additionalProperties": false,
      "properties": {
        "references": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "from_column": {
                "type": "string"
              },
              "to_column": {
                "type": "string"
              },
              "to_table": {
                "type": "string"
              }
            },
            "required": [
              "to_table",
              "from_column",
              "to_column"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "references"
      ],
      "type": "object"
    },
    "NodeDescription": {
      "additionalProperties": false,
      "description": "This description regulates how all ASTs should be stored when\nwritten to disk or sent over the wire. It requires every\nnode to at least tell its name and some hint how a node can be\nconstructed at runtime.\n\nThe data of a node is split up in two broader categories:\nChildren, which may be nested and properties, which should\nnot allow any nesting.",
      "properties": {
        "children": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/NodeDescription"
            },
            "type": "array"
          },
          "description": "Nodes may have children in various categories. This base class\nmakes no assumptions about the names of children. Examples for\nchildren in multiple categories would be things like \"attributes\"\nand generic \"children\" in a specialization for XML.",
          "type": "object"
        },
        "language": {
          "description": "This is effectively a namespace, allowing identical\nnames for nodes in different languages.",
          "type": "string"
        },
        "name": {
          "description": "The name of this not, this is used to lookup the name of a\ncorresponding type.",
          "type": "string"
        },
        "properties": {
          "description": "Nodes may have all kinds of properties that are specific to their\nconcrete use.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "language"
      ],
      "type": "object"
    },
    "ProjectDescription": {
      "additionalProperties": false,
      "description": "The properties of a project that can be queried from the\nserver when asking for a specific project.\n\nOnly contains publically visible data, not the\npassword or other private information.",
      "properties": {
        "activeDatabase": {
          "type": "string"
        },
        "apiVersion": {
          "$ref": "#/definitions/ApiVersionToken",
          "description": "These API versions are merely a number, no need to overcomplicate things.\nIf versions differ, any implementing the API is free to specify\nversion ranges it works with."
        },
        "availableDatabases": {
          "additionalProperties": {
            "$ref": "#/definitions/AvailableDatabaseDescription"
          },
          "type": "object"
        },
        "blockLanguages": {
          "items": {
            "$ref": "#/definitions/BlockLanguageDescription"
          },
          "type": "array"
        },
        "codeResources": {
          "items": {
            "$ref": "#/definitions/CodeResourceDescription"
          },
          "type": "array"
        },
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "indexPageId": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/ProjectName"
        },
        "preview": {
          "type": "string"
        },
        "projectUsesBlockLanguages": {
          "items": {
            "$ref": "#/definitions/ProjectUsesBlockLanguageDescription"
          },
          "type": "array"
        },
        "public": {
          "type": "boolean"
        },
        "schema": {
          "items": {
            "$ref": "#/definitions/TableDescription"
          },
          "type": "array"
        },
        "slug": {
          "$ref": "#/definitions/ProjectSlug"
        },
        "sources": {
          "items": {
            "$ref": "#/definitions/ProjectSourceDescription"
          },
          "type": "array"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "blockLanguages",
        "codeResources",
        "description",
        "id",
        "name",
        "projectUsesBlockLanguages",
        "schema",
        "slug",
        "sources"
      ],
      "type": "object"
    },
    "ProjectName": {
      "description": "The name of the project. May only contain more or less friendly\ncharacters.",
      "pattern": "^[a-zA-Z0-9 \\-_\\?äöüÄÖÜß:]{4,}$",
      "type": "string"
    },
    "ProjectSlug": {
      "description": "The url-friendly name of the project. May only contain characters that do not\nmean any trouble in URLs.",
      "pattern": "^[a-z0-9\\-]{4,}$",
      "type": "string"
    },
    "ProjectSourceDescription": {
      "additionalProperties": false,
      "description": "Some projects are based on external sources, especially regarding\nthe data in the databases. These references may be used to\ncorrectly acknowledge such sources.",
      "properties": {
        "display": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "data"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "url",
        "display",
        "readOnly"
      ],
      "type": "object"
    },
    "ProjectUsesBlockLanguageDescription": {
      "additionalProperties": false,
      "description": "A block language that is used by this project.",
      "properties": {
        "blockLanguageId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "blockLanguageId"
      ],
      "type": "object"
    },
    "QualifiedTypeName": {
      "additionalProperties": false,
      "description": "Used when refererring to types that are defined other languages.",
      "properties": {
        "languageName": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        }
      },
      "required": [
        "typeName",
        "languageName"
      ],
      "type": "object"
    },
    "QueryPreviewComponentDescription": {
      "additionalProperties": false,
      "properties": {
        "componentType": {
          "enum": [
            "query-preview"
          ],
          "type": "string"
        }
      },
      "required": [
        "componentType"
      ],
      "type": "object"
    },
    "SidebarBlockDescription": {
      "additionalProperties": false,
      "description": "Describes how the available types should be represented in the sidebar.\nIt is perfectly fine to have multiple sidebar descriptions for the\nsame underlying type.",
      "properties": {
        "defaultNode": {
          "$ref": "#/definitions/NodeDescription",
          "description": "This description will be instanciated every time an \"empty\" node\nis needed. This happens e.g. when the user starts dragging this\nblock from the sidebar."
        },
        "displayName": {
          "description": "The name to be displayed in the sidebar",
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "defaultNode"
      ],
      "type": "object"
    },
    "SidebarDescription": {
      "anyOf": [
        {
          "$ref": "#/definitions/FixedBlocksSidebarDescription"
        },
        {
          "$ref": "#/definitions/DatabaseSchemaSidebarDescription"
        }
      ],
      "description": "All possible sidebar types"
    },
    "TableDescription": {
      "additionalProperties": false,
      "description": "The \"over-the-wire\" description of a single table \nwith all of its columns.",
      "properties": {
        "columns": {
          "items": {
            "$ref": "#/definitions/ColumnDescription"
          },
          "minItems": 1,
          "type": "array"
        },
        "foreign_keys": {
          "items": {
            "$ref": "#/definitions/ForeignKeyDescription"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "system_table": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "columns",
        "foreign_keys"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.BlockStyle": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "We currently allow any CSS style to be used.",
      "type": "object"
    },
    "VisualBlockDescriptions.CategoryInsert": {
      "additionalProperties": false,
      "properties": {
        "category": {
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsertPosition"
        }
      },
      "required": [
        "order",
        "category"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.CategoryInsertPosition": {
      "description": "The locations of categories at which insertions may occur.",
      "enum": [
        "insertFirst",
        "insertLast"
      ],
      "type": "string"
    },
    "VisualBlockDescriptions.ConcreteBlock": {
      "anyOf": [
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorBlock"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorDropTarget"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorIterator"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorConstant"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorInterpolated"
        },
        {
          "$ref": "#/definitions/VisualBlockDescriptions.EditorInput"
        }
      ]
    },
    "VisualBlockDescriptions.DropTargetProperties": {
      "additionalProperties": false,
      "description": "These properties are required to specify drop targets.",
      "properties": {
        "children": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsert"
        },
        "parent": {
          "$ref": "#/definitions/VisualBlockDescriptions.CategoryInsert"
        },
        "self": {
          "additionalProperties": false,
          "properties": {
            "order": {
              "enum": [
                "insertBefore",
                "insertAfter"
              ],
              "type": "string"
            },
            "skipParents": {
              "type": "number"
            }
          },
          "required": [
            "order",
            "skipParents"
          ],
          "type": "object"
        },
        "visibility": {
          "items": [
            {
              "enum": [
                "ifAnyDrag",
                "ifLegalDrag",
                "ifLegalChild",
                "ifEmpty",
                "always"
              ],
              "type": "string"
            }
          ],
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "VisualBlockDescriptions.EditorBlock": {
      "additionalProperties": false,
      "description": "Describes how a certain block should be represented. Blocks are\nalways draggable and also possible drop targets.",
      "properties": {
        "blockType": {
          "enum": [
            "block"
          ],
          "type": "string"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "dropAction": {
          "enum": [
            "append",
            "replace"
          ],
          "type": "string"
        },
        "dropTarget": {
          "$ref": "#/definitions/VisualBlockDescriptions.DropTargetProperties"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "direction"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorConstant": {
      "additionalProperties": false,
      "description": "Displays a constant value that does not allow any user interaction.",
      "properties": {
        "blockType": {
          "enum": [
            "constant"
          ],
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        },
        "text": {
          "type": "string"
        }
      },
      "required": [
        "blockType",
        "text"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorDropTarget": {
      "additionalProperties": false,
      "description": "Describes a \"block\" that only acts as a hole to drop things at.\nIt is not necesarily visible in every state and it is not draggable.",
      "properties": {
        "blockType": {
          "enum": [
            "dropTarget"
          ],
          "type": "string"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "dropTarget": {
          "$ref": "#/definitions/VisualBlockDescriptions.DropTargetProperties"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "direction"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorInput": {
      "additionalProperties": false,
      "description": "Displays an interpolated value and allows it to be edited.",
      "properties": {
        "blockType": {
          "enum": [
            "input"
          ],
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "property"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorInterpolated": {
      "additionalProperties": false,
      "description": "Displays a dynamic value that depends on some property of the node but\ndoes not allow to edit the property.",
      "properties": {
        "blockType": {
          "enum": [
            "interpolated"
          ],
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "property"
      ],
      "type": "object"
    },
    "VisualBlockDescriptions.EditorIterator": {
      "additionalProperties": false,
      "description": "Allows to iterate over all blocks in a certain category.",
      "properties": {
        "between": {
          "items": {
            "$ref": "#/definitions/VisualBlockDescriptions.ConcreteBlock"
          },
          "type": "array"
        },
        "blockType": {
          "enum": [
            "iterator"
          ],
          "type": "string"
        },
        "childGroupName": {
          "type": "string"
        },
        "direction": {
          "enum": [
            "horizontal",
            "vertical"
          ],
          "type": "string"
        },
        "style": {
          "$ref": "#/definitions/VisualBlockDescriptions.BlockStyle"
        }
      },
      "required": [
        "blockType",
        "childGroupName",
        "direction"
      ],
      "type": "object"
    }
  }
}